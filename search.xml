<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决若依vue版菜单点不开Error: Cannot find module &#39;@/views/system/user/index&#39;错误</title>
      <link href="/2023/06/07/%E8%8B%A5%E4%BE%9D%E8%8F%9C%E5%8D%95%E7%82%B9%E5%87%BB%E4%B8%8D%E8%B7%B3%E8%BD%AC/"/>
      <url>/2023/06/07/%E8%8B%A5%E4%BE%9D%E8%8F%9C%E5%8D%95%E7%82%B9%E5%87%BB%E4%B8%8D%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>项目中遇到问题：在使用若依的后台管理时，若依 vue 版菜单点不开，报错：Error: Cannot find module ‘@&#x2F;views&#x2F;system&#x2F;user&#x2F;index’后台、vue前端启动都没问题。但是左侧菜单点不开，一直在加载中。</p><h2 id="控制台报错"><a href="#控制台报错" class="headerlink" title="控制台报错"></a>控制台报错</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Error</span>: <span class="title class_">Cannot</span> find <span class="variable language_">module</span> <span class="string">&#x27;@/views/system/user/index&#x27;</span></span><br><span class="line">  at webpackEmptyContext (index.<span class="property">js</span>:<span class="number">39</span>)</span><br><span class="line">  at permission.<span class="property">js</span>:<span class="number">73</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>了解到是 webpack 版本问题，webpack4 不支持变量方式的动态 import ，新版本的使用 require() 来解决此问题。</li><li>打开 src&#x2F;store&#x2F;modules&#x2F;permission.js 文件，将加载方式修改成：</li></ul><h3 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loadView</span> = (<span class="params">view</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">`@/views/<span class="subst">$&#123;view&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loadView</span> = (<span class="params">view</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">`@/views/<span class="subst">$&#123;view&#125;</span>`</span>], resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端问题收集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react面试题</title>
      <link href="/2023/06/07/React%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/06/07/React%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>继续整理，本篇以react为主，如需其他，请阅读其他文章。</p><h2 id="什么是-React？它的主要特点是什么？"><a href="#什么是-React？它的主要特点是什么？" class="headerlink" title="什么是 React？它的主要特点是什么？"></a>什么是 React？它的主要特点是什么？</h2><ul><li>React 是由 Facebook 开发的用于构建用户界面的 JavaScript 库。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><ul><li>组件化开发: React 提倡将 UI 划分为独立、可重用的组件，每个组件负责自身的状态管理和渲染逻辑，便于开发和维护复杂的应用程序。</li><li>虚拟 DOM：React 使用虚拟 DOM 作为中间层，将组件的状态变化映射到虚拟 DOM 树上，然后通过 diff 算法找出变化的部分，并进行高效的更新操作，减少对真实 DOM 的操作，提高性能。</li><li>单向数据流：React 遵循单向数据流的原则，数据的流动是自顶向下的，从父组件传递到子组件，子组件通过 props 接收和渲染数据，保证了数据的可追踪性和可维护性。</li><li>声明式编程：React 采用声明式编程模型，开发者只需要关注界面应该是什么样子的，而不需要关注具体的 DOM 操作，简化了开发过程。</li><li>高效更新：通过使用虚拟 DOM 和 diff 算法，React 能够高效地更新页面，只更新变化的部分，减少了不必要的 DOM 操作，提升了性能。</li><li>生态丰富：React 拥有庞大的生态系统，有许多第三方库和工具可供选择，例如 React Router 用于路由管理、Redux 用于状态管理等，可以快速构建复杂的应用程序。</li></ul><h2 id="类组件和函数组件"><a href="#类组件和函数组件" class="headerlink" title="类组件和函数组件"></a>类组件和函数组件</h2><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><ul><li>类组件是使用 ES6 类语法定义的组件。它们继承自 React.Component 类。</li><li>通过继承来获得 React 提供的特性和生命周期方法。</li><li>必须包含一个render()方法，返回要渲染的jsx元素<br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, I&#x27;m a class component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><ul><li>是纯粹的 JavaScript 函数，接收一个 props 对象作为参数，并返回要渲染的 JSX 元素。</li><li>没有自己的状态和生命周期方法。</li><li>在 React 16.8 版本之后，引入了 Hooks</li><li>通过使用 Hooks，使得函数组件也能具有类组件的一些特性，如状态管理和生命周期钩子的功能<br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, I&#x27;m a function component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="什么是jsx"><a href="#什么是jsx" class="headerlink" title="什么是jsx"></a>什么是jsx</h2><ul><li>JSX（JavaScript XML）是一种在 JavaScript 代码中编写类似 HTML 结构的语法扩展</li></ul><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ul><li>在项目中使用 React 库：在你的项目中引入 React 库，可以使用 npm 或者在 HTML 页面中通过 <script></script> 标签引入 React 库。</li><li>编写 JSX 代码：在 JavaScript 文件中，你可以使用 JSX 语法编写组件的结构。JSX 代码看起来类似于 HTML，但它实际上是 JavaScript 代码。</li></ul><h2 id="React-中的状态（state）和属性（props）有什么区别？"><a href="#React-中的状态（state）和属性（props）有什么区别？" class="headerlink" title="React 中的状态（state）和属性（props）有什么区别？"></a>React 中的状态（state）和属性（props）有什么区别？</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><ul><li>状态是组件内部管理的可变数据。它代表了组件的当前状态或数据的变化。</li><li>状态是通过类组件的 state 属性来定义和管理的，使用类组件的 setState() 方法来更新状态。</li><li>状态是私有的，只能在组件内部访问和修改。其他组件无法直接访问或修改组件的状态。</li><li>状态的更新可能会触发组件的重新渲染，从而更新视图。</li></ul><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ul><li>属性是从父组件传递给子组件的数据，用于定义和配置组件的行为和外部数据。</li><li>属性是只读的，子组件无法直接修改自己的属性值。它们由父组件负责管理和更新。</li><li>属性在父组件内部通过 JSX 语法进行传递，在子组件内部通过 this.props 来访问。</li><li>属性的值是在父组件中定义的，并在子组件使用时传递给子组件。子组件无法直接更改属性的值，只能通过父组件的更新来影响属性的值。</li></ul><h2 id="虚拟Dom和真实Dom"><a href="#虚拟Dom和真实Dom" class="headerlink" title="虚拟Dom和真实Dom"></a>虚拟Dom和真实Dom</h2><h3 id="虚拟Dom"><a href="#虚拟Dom" class="headerlink" title="虚拟Dom"></a>虚拟Dom</h3><ul><li>当组件状态发生变化时，React 会创建一个新的虚拟 DOM 树，与之前的虚拟 DOM 树进行比较。</li><li>React 通过比较新旧虚拟 DOM 树的差异，找出需要更新的部分，这个过程称为协调</li><li>最后，React 将计算得到的差异应用于真实 DOM，只更新发生变化的部分，这个过程称为渲染（Rendering）。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>性能优化： 虚拟 DOM 通过在 JavaScript 对象上进行操作，可以减少对真实 DOM 的直接访问，从而提高性能。</li><li>批量更新： 通过比较新旧虚拟 DOM 树，React 可以一次性计算出所有需要更新的部分，并最小化对真实 DOM 的操作。</li><li>抽象层： 开发者只需关注组件的状态更新，而无需手动操作真实 DOM。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>constructor(props): 在组件被创建时调用，用于初始化组件的状态（state）和绑定事件处理函数。</li><li>componentDidMount(): 在组件被插入到 DOM 树中后立即调用，通常用于进行一次性的操作，如获取远程数据、添加事件监听等。</li><li>componentDidUpdate(prevProps, prevState): 在组件更新后调用，用于对更新后的组件进行操作，比如根据新的 props 进行条件渲染、更新状态等。注意，在该方法内部更新状态时需要添加条件，以免进入无限循环。</li><li>componentWillUnmount(): 在组件被从 DOM 树中移除前调用，通常用于清理组件相关的资源、取消订阅、移除事件监听等。</li><li>shouldComponentUpdate(nextProps, nextState): 在组件更新前调用，用于判断是否需要进行组件的重新渲染。可以根据当前的 props 和 state 与下一次的 props 和 state 进行比较，返回 true 表示需要更新，返回 false 表示不需要更新。</li><li>static getDerivedStateFromProps(props, state): 在组件将要更新前调用，用于根据新的 props 计算并返回一个新的状态（state）。这个方法在 React 16.3 版本引入，替代了旧版本的 componentWillReceiveProps()。</li><li>render(): 在组件更新时调用，用于返回组件的 JSX 结构，描述组件的外观和结构。</li><li>getSnapshotBeforeUpdate(prevProps, prevState): 在组件更新前调用，用于在组件发生更新之前捕获当前的 DOM 状态。通常配合 componentDidUpdate() 方法使用，用于处理 DOM 更新后的一些操作，如滚动位置恢复等。</li></ul><h2 id="React常用Hooks"><a href="#React常用Hooks" class="headerlink" title="React常用Hooks"></a>React常用Hooks</h2><ul><li>useState：用于在函数组件中添加状态管理。</li><li>useEffect：用于处理副作用操作，如订阅事件、发起网络请求等。</li><li>useContext：用于访问 React 上下文。</li><li>useRef：用于创建可变的引用。</li><li>useCallback：用于优化函数的性能，避免重复创建函数实例。</li><li>useMemo：用于优化计算结果的性能，避免重复计算。</li><li>useReducer：用于管理复杂的状态逻辑，类似于 Redux 中的 reducer。</li><li>useLayoutEffect：类似于 useEffect，但在 DOM 更新之前同步执行，可以用于处理需要同步计算布局的情况。</li><li>useRef：用于在函数组件之间共享引用。</li><li>useImperativeHandle：用于自定义父组件通过 ref 访问子组件的实例方法。</li></ul><h2 id="React-组件之间的通信"><a href="#React-组件之间的通信" class="headerlink" title="React 组件之间的通信"></a>React 组件之间的通信</h2><ul><li>Props（属性）传递：通过父组件向子组件传递属性（props），子组件可以读取和使用这些属性。这是 React 中最常见的一种通信方式，适用于父子组件之间的数据传递。</li><li>回调函数：父组件可以将一个函数作为 props 传递给子组件，子组件可以调用该函数，从而向父组件传递信息或触发某些操作。</li><li>Context 上下文：React 的上下文（Context）机制允许在组件树中共享数据，可以在父组件中创建上下文，并在需要的子组件中访问该上下文。这种方式适用于需要在多个层级的组件之间共享数据的情况。</li><li>全局状态管理（如 Redux、MobX）：使用第三方状态管理库，例如 Redux、MobX，可以将组件的状态提升到全局状态中，并通过订阅和派发事件的方式实现组件之间的通信。</li><li>React Router：React Router 是 React 的官方路由库，通过路由配置和组件渲染，可以实现不同组件之间的导航和通信。</li></ul><h2 id="如何使用-Context-实现跨组件的数据共享？"><a href="#如何使用-Context-实现跨组件的数据共享？" class="headerlink" title="如何使用 Context 实现跨组件的数据共享？"></a>如何使用 Context 实现跨组件的数据共享？</h2><ul><li>Provider（提供者）：Provider 是 Context 的生产者，它通过将值传递给 Context 创建一个 Provider 组件，并将该组件包装在要共享数据的组件树的最顶层。</li><li>Consumer（消费者）：Consumer 是 Context 的消费者，它通过在组件树中使用 Consumer 组件来访问 Provider 提供的值。<br>   <font color=#00FFFF>例：</font>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Context：使用 React.createContext() 创建一个 Context 对象，并提供默认的初始值。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(defaultValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供数据：在顶层组件或需要共享数据的组件上，使用 Context 提供者（Provider）包装组件，并将要共享的数据传递给 Provider。</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;sharedData&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;/* 其他组件 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费数据：在需要访问共享数据的组件中，使用 Context 消费者（Consumer）来接收提供者传递的数据，并在 Consumer 的回调函数中使用该数据。</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;value =&gt; (</span></span><br><span class="line"><span class="language-xml">    &#123;/* 使用共享的数据 */&#125;</span></span><br><span class="line"><span class="language-xml">  )&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>将 hexo 推送至github</title>
      <link href="/2023/06/06/hexo%E6%8E%A8%E9%80%81git/"/>
      <url>/2023/06/06/hexo%E6%8E%A8%E9%80%81git/</url>
      
        <content type="html"><![CDATA[<p>今天突然想到，如果我后续更换了设备，那我的博客不就没办法继续写了吗，因为git上是没有源码的。于是就查找资料，跟大佬学了一手 hexo 推送至 github。主要利用的还是 git 分支的特性。</p><h2 id="旧电脑操作"><a href="#旧电脑操作" class="headerlink" title="旧电脑操作"></a>旧电脑操作</h2><ul><li>登录到 github 找到自己的博客项目，新建一个 <font color=#FF9900>hexo</font> 分支，并且将其设置为默认分支。<br><img src="/../img/git01.png" alt="新建hexo分支01"><br><img src="/../img/git02.png" alt="新建hexo分支02"><br><img src="/../img/git.png" alt="设置为默认分支"></li><li>在本地新建一个目录，将 hexo 分支的代码 clone 至本地（后续都称hexo项目）。</li><li>从<font color=#FF9900>文件夹</font>打开 hexo （编辑器有的文件看不到），删除掉除了 <font color=#FF9900>.git</font> 之外的所有文件。</li><li>终端进入到 hexo 下，依次执行下列命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;--&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></li><li>执行完你会发现 github 上的 hexo 分支已经清空了。</li><li><font color=#FF9900>将 hexo 的 .git 文件复制到自己的博客根目录下</font>（与themes、source同级）。（执行完这一步本地的博客就可以和hexo分支相连了）</li><li>进入到 themes 目录下， 删除掉里面的 .git 和 .gitignore。（包括<font color=#FF9900>各个主题下的这两个文件也都要删除</font>。否则主题下的文件推不上去）</li><li>回到博客根目录。继续三连<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;--&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>到这基本就完成了！</li></ul><p><font color=red>一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。</font></p><h2 id="新电脑操作"><a href="#新电脑操作" class="headerlink" title="新电脑操作"></a>新电脑操作</h2><ul><li>先把该装的环境装好（node.js, git, hexo, sshkey配置好）</li><li>选好博客的目录创建文件夹</li><li>执行 git clone <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#x63;&#111;&#x6d;</a>:username&#x2F;username.github.io.git blog； 将 hexo 分支的代码 clone 下来</li><li>cd到博客里面，安装依赖 npm i</li><li>hexo s 启动博客。正常是已经可以访问了的</li></ul><h2 id="后续提交"><a href="#后续提交" class="headerlink" title="后续提交"></a>后续提交</h2><ul><li>后面就可以每次将代码推送至 github 的 hexo 分支保存。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;--&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></li><li>然后正常发布就可以<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ul><p>文章转载至：<a href="https://blog.csdn.net/weixin_44008788/article/details/108325786?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-108325786-blog-109921090.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-108325786-blog-109921090.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=6">https://blog.csdn.net/weixin_44008788/article/details/108325786?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-108325786-blog-109921090.235%5Ev38%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-108325786-blog-109921090.235%5Ev38%5Epc_relevant_default_base&amp;utm_relevant_index=6</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>乌镇攻略</title>
      <link href="/2023/06/06/%E4%B9%8C%E9%95%87/"/>
      <url>/2023/06/06/%E4%B9%8C%E9%95%87/</url>
      
        <content type="html"><![CDATA[<p>粗去玩-乌镇准备</p><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><ul><li>浙江桐乡</li></ul><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><ul><li>以下价格默认为二等座<h3 id="杭州东-桐乡"><a href="#杭州东-桐乡" class="headerlink" title="杭州东 - 桐乡"></a>杭州东 - 桐乡</h3><ul><li>可以直接打车 顺风车 约1.5h 100元左右<table><thead><tr><th></th><th>高铁</th><th>动车</th><th>火车</th></tr></thead><tbody><tr><td>价格&#x2F;元</td><td>21.5</td><td>17</td><td>暂无</td></tr><tr><td>时长&#x2F;分</td><td>17</td><td>17</td><td>暂无</td></tr></tbody></table></li></ul></li></ul><h3 id="上海-桐乡"><a href="#上海-桐乡" class="headerlink" title="上海 - 桐乡"></a>上海 - 桐乡</h3><ul><li><p>上海虹桥 - 桐乡</p><table><thead><tr><th></th><th>高铁</th><th>动车</th><th>火车</th></tr></thead><tbody><tr><td>价格&#x2F;元</td><td>50.5</td><td>41</td><td>暂无</td></tr><tr><td>时长&#x2F;分</td><td>40</td><td>47</td><td>暂无</td></tr></tbody></table></li><li><p>上海站 - 桐乡</p></li><li><p>查询了几天，发现只有高铁：价格（65.5）时长(1时08分) ps：建议虹桥坐车</p></li><li><p>到达桐乡出战后乘坐 k282（约1h） 到乌镇汽车站，换成 k350（约10min） 到达 乌镇西栅区</p></li></ul><h2 id="乌镇布局"><a href="#乌镇布局" class="headerlink" title="乌镇布局"></a>乌镇布局</h2><ul><li>分为东西南北四栅</li><li>西栅门票 150 元（有夜景）</li><li>东栅门票 110元</li><li>南北栅无需门票<br>ps： 时间充足可以游玩全部，如只有一天时间建议西栅，游玩的人比较多</li></ul><h2 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h2><ul><li>便宜点的 100 - 200 左右 基本距离西栅景区 1公里左右</li><li>贵点的基本 400 左右； 西栅景区内和周边都有</li><li>橘子酒店 离西栅景区很近 价格 300 左右<br>  ps： 有的攻略说西栅景区内住房免门票（回来后补充）</li></ul><h2 id="景点"><a href="#景点" class="headerlink" title="景点"></a>景点</h2><h3 id="西栅景区"><a href="#西栅景区" class="headerlink" title="西栅景区"></a>西栅景区</h3><h4 id="木心美术馆"><a href="#木心美术馆" class="headerlink" title="木心美术馆"></a>木心美术馆</h4><ul><li>时间： 9：00 - 17：30</li><li>门票： 20</li><li>展览木心先生的作品。 ps: 不可随意拍照</li></ul><h4 id="水上集市"><a href="#水上集市" class="headerlink" title="水上集市"></a>水上集市</h4><ul><li>早茶时间： 6：00 - 9：00</li><li>门票： 免费（需提前预约）</li><li>清晨各种早茶，感受江南气息</li></ul><h4 id="白莲塔"><a href="#白莲塔" class="headerlink" title="白莲塔"></a>白莲塔</h4><ul><li>门票： 免费</li><li>乌镇最高的建筑，可以看到西栅全景</li></ul><h4 id="草木本色染坊"><a href="#草木本色染坊" class="headerlink" title="草木本色染坊"></a>草木本色染坊</h4><ul><li>门票： 免费</li><li>无数条挂下来的白布，像影视剧中的画一般</li></ul><h4 id="灵水局"><a href="#灵水局" class="headerlink" title="灵水局"></a>灵水局</h4><ul><li>门票： 免费</li><li>翡翠绿的天堂，非常有古风的味道</li></ul><h4 id="乌镇老邮局"><a href="#乌镇老邮局" class="headerlink" title="乌镇老邮局"></a>乌镇老邮局</h4><ul><li>门票： 免费</li><li>墙上 “从前车马很慢，书信很远，一生只够爱一人”</li></ul><h4 id="昭明书院"><a href="#昭明书院" class="headerlink" title="昭明书院"></a>昭明书院</h4><ul><li>门票： 免费</li><li>窗明几净的书房，非常出片</li></ul><h4 id="月老庙"><a href="#月老庙" class="headerlink" title="月老庙"></a>月老庙</h4><ul><li>门票： 免费</li><li>可以去求姻缘哈哈哈</li></ul><h4 id="西庆堂"><a href="#西庆堂" class="headerlink" title="西庆堂"></a>西庆堂</h4><ul><li>门票： 免费</li><li>可以看看古时的大户人家如何出嫁</li></ul><h4 id="矛盾纪念馆"><a href="#矛盾纪念馆" class="headerlink" title="矛盾纪念馆"></a>矛盾纪念馆</h4><ul><li>门票： 免费</li><li>矛盾先生的作品</li></ul><p><img src="/../img/wuzhen.jpg" alt="路线图"></p>]]></content>
      
      
      <categories>
          
          <category> 粗去玩 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 发布报错-spawn failed</title>
      <link href="/2023/06/05/hexo%E5%8F%91%E5%B8%83%E6%8A%A5%E9%94%99/"/>
      <url>/2023/06/05/hexo%E5%8F%91%E5%B8%83%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>由于本人在搭建博客发布时经常遇到问题，所以就记录了下来，希望对你们有所帮助</p><ul><li>hexo d 发布时有时候会报错 spawn failed</li><li>之前经常碰到这个问题是在魔改样式时碰到的，所以大家在魔改之间可以提前备份一份 _config.butterfly.yml 文件，如果遇到问题，也可以快速回退。</li></ul><p>如果是刚搭建博客时，发布就遇到这样的问题，可以尝试以下两种方式</p><h2 id="解决方案01"><a href="#解决方案01" class="headerlink" title="解决方案01"></a>解决方案01</h2><ul><li>打开配置文件 ——config.yml</li><li>修改其中的配置  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line"><span class="attr">type</span>: git</span><br><span class="line"><span class="comment">// repo:https://github.com/yourName/yourName.github.io.git(不要使用这个)</span></span><br><span class="line"><span class="attr">repo</span>: git@github.<span class="property">com</span>:yourName/yourName.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span></span><br><span class="line"><span class="attr">branch</span>:</span><br><span class="line">  master</span><br></pre></td></tr></table></figure></li><li>可以将其中的博客地址替换为ssh的形式在尝试发布一次</li></ul><h2 id="解决方案02"><a href="#解决方案02" class="headerlink" title="解决方案02"></a>解决方案02</h2><ul><li>如果上述的方法不成功，可以尝试下这个方法</li><li>将下面三个指令走一遍  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 删除这个文件</span><br><span class="line">rm -rf .depoly_git</span><br><span class="line"></span><br><span class="line">// 将git加入系统环境变量</span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"></span><br><span class="line">// 重新执行一键三连</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure></li></ul><h2 id="解决方案03"><a href="#解决方案03" class="headerlink" title="解决方案03"></a>解决方案03</h2><ul><li>如果之前发布的很正常，突然发布不成功，可以尝试以下方案</li><li>如果突然的切换 sshkey 则也有可能导致 hexo d 失败（别问我怎么知道的 emmm…）</li><li>建议重新生成一个 sshkey 去git上替换掉原先的 sshkey<br>  <a href="https://nanako-00.github.io/2023/06/05/%E7%94%9F%E6%88%90sshkey/">如何生成并替换 sshkey</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置git sshkey</title>
      <link href="/2023/06/05/%E7%94%9F%E6%88%90sshkey/"/>
      <url>/2023/06/05/%E7%94%9F%E6%88%90sshkey/</url>
      
        <content type="html"><![CDATA[<p>使用sshkey拉取项目时需要配置sshKey，所以今天来记录下sshkey配置过程</p><h2 id="检查有没有已有的sshkey"><a href="#检查有没有已有的sshkey" class="headerlink" title="检查有没有已有的sshkey"></a>检查有没有已有的sshkey</h2><ul><li>如果有可以直接使用，如果没有则继续往下看<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure></li></ul><h2 id="生成sshkey"><a href="#生成sshkey" class="headerlink" title="生成sshkey"></a>生成sshkey</h2><ul><li><p>执行命令配置name和email</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的name&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>生成密钥</p></li><li><p>以下使用的邮箱同上配置的一样</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul><p><font color=#00FFFF>代码参数含义：</font><br>  -t 指定密钥类型，默认是 rsa ，可以省略。<br>  -C 设置注释文字，比如邮箱。<br>  -f 指定密钥文件存储文件名。</p><p>指令走完后</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/ASUS/.ssh/id_rsa):   &lt;===  输入回车</span><br><span class="line">/c/Users/ASUS/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y  &lt;===  输入y（有的也是回车）</span><br><span class="line">Enter passphrase (empty for no passphrase):  &lt;===  继续输入回车</span><br><span class="line">Enter same passphrase again:    &lt;===  继续输入回车</span><br><span class="line">Your identification has been saved in /c/Users/ASUS/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /c/Users/ASUS/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Y9HCO1xmOK+3HG8iR8ZPZM1skZ8/T3VHnMD2IkwIvyE youremail@.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|       .. . ...o.|</span><br><span class="line">|       ..+ . oo.o|</span><br><span class="line">|       E*oB .+.+.|</span><br><span class="line">|       ..Xooo.=o=|</span><br><span class="line">|        So.o... =|</span><br><span class="line">|       . ++ .  .o|</span><br><span class="line">|        .ooo   .o|</span><br><span class="line">|        .oo+o   .|</span><br><span class="line">|         ooo.    |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>指令执行完之后可以进入c盘的.ssh文件夹下找到id_rsa.pub文件就是sshkey(ctrl + a 复制内容)</p><h2 id="sshkey添加至远端"><a href="#sshkey添加至远端" class="headerlink" title="sshkey添加至远端"></a>sshkey添加至远端</h2><ol><li>登录 github 点击头像找到settings 选项</li><li>进入该页面后在左侧找到 SSH and GPG keys 选项</li><li>点击 New SSh key 按钮</li><li>在Title输入名称， 将 id_rsa.pub 的内容粘贴到key里面</li><li>点击 Add SSh key 完成</li></ol>]]></content>
      
      
      <categories>
          
          <category> git配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue 集成 only office 实现文档编辑，预览功能</title>
      <link href="/2023/06/02/only-office%E7%BC%96%E8%BE%91%E9%A2%84%E8%A7%88/"/>
      <url>/2023/06/02/only-office%E7%BC%96%E8%BE%91%E9%A2%84%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>上司让使用only office实现一个预览编辑的功能，查找文档后找到了如下方法，便记录了下来</p><h2 id="基本配置使用"><a href="#基本配置使用" class="headerlink" title="基本配置使用"></a>基本配置使用</h2><h3 id="引入后台配置好的only-office服务器"><a href="#引入后台配置好的only-office服务器" class="headerlink" title="引入后台配置好的only office服务器"></a>引入后台配置好的only office服务器</h3><ol><li><p>直接在public下的index.html引入</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&#x27;text/javascript&#x27;</span> src=<span class="string">&#x27;http://ip:port/web-apps/apps/api/documents/api.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>在created函数中引入</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">script.<span class="property">src</span> = <span class="attr">http</span>:<span class="comment">//ip:port/web-apps/apps/api/documents/api.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure></li></ol><h2 id="Vue组件封装"><a href="#Vue组件封装" class="headerlink" title="Vue组件封装"></a>Vue组件封装</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;monitorOffice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;handleDocType&#125; <span class="keyword">from</span> <span class="string">&quot;../common/utils&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">option</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">doctype</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">url</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="title function_">setEditor</span>(<span class="variable language_">this</span>.<span class="property">option</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">setEditor</span>(<span class="params">option</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="variable language_">this</span>.<span class="property">doctype</span> = <span class="title function_">handleDocType</span>(option.<span class="property">fileType</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// office配置参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> config = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">document</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">fileType</span>: option.<span class="property">fileType</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">key</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">title</span>: option.<span class="property">title</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">permissions</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">comment</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">download</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">modifyContentControl</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">modifyFilter</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">print</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">edit</span>: option.<span class="property">isEdit</span>,<span class="comment">//是否可以编辑: 只能查看，传false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="comment">// &quot;fillForms&quot;: true,//是否可以填写表格，如果将mode参数设置为edit，则填写表单仅对文档编辑器可用。 默认值与edit或review参数的值一致。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="comment">// &quot;review&quot;: true //跟踪变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">url</span>: option.<span class="property">url</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">documentType</span>: <span class="variable language_">this</span>.<span class="property">doctype</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">editorConfig</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">callbackUrl</span>: option.<span class="property">editUrl</span>,<span class="comment">//&quot;编辑word后保存时回调的地址，这个api需要自己写了，将编辑后的文件通过这个api保存到自己想要的位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">lang</span>: <span class="string">&quot;zh&quot;</span>,<span class="comment">//语言设置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">customization</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">autosave</span>: <span class="literal">false</span>,<span class="comment">//是否自动保存</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">chat</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">comments</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">help</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="comment">// &quot;hideRightMenu&quot;: false,//定义在第一次加载时是显示还是隐藏右侧菜单。 默认值为false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">logo</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="attr">image</span>: <span class="string">&quot;https://file.iviewui.com/icon/viewlogo.png&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="attr">imageEmbedded</span>: <span class="string">&quot;https://file.iviewui.com/icon/viewlogo.png&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">spellcheck</span>: <span class="literal">true</span>,<span class="comment">//拼写检查</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">width</span>: <span class="string">&quot;100%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">height</span>: <span class="string">&quot;100%&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> docEditor = <span class="keyword">new</span> <span class="title class_">DocsAPI</span>.<span class="title class_">DocEditor</span>(<span class="string">&quot;monitorOffice&quot;</span>, config);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">option</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params">n, o</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="title function_">setEditor</span>(n);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">doctype</span> = <span class="title function_">handleDocType</span>(n.<span class="property">fileType</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">deep</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;monitor-report&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Upload</span> <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.doc,.docx&quot;</span> <span class="attr">:action</span>=<span class="string">&quot;action&quot;</span> <span class="attr">:headers</span>=<span class="string">&quot;header&quot;</span> <span class="attr">:format</span>=<span class="string">&quot;[&#x27;doc&#x27;,&#x27;docx&#x27;]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:on-success</span>=<span class="string">&quot;handleSuccess&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:show-upload-list</span>=<span class="string">&quot;false&quot;</span> <span class="attr">:before-upload</span>=<span class="string">&quot;handleBeforeUpload&quot;</span> <span class="attr">:on-format-error</span>=<span class="string">&quot;handleFormatError&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;up-class&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>（文件格式为：doc,docx）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Upload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;office&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;pageLoading&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MonitorOffice</span> <span class="attr">:option</span>=<span class="string">&quot;option&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">MonitorOffice</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// js</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;<span class="title class_">GetMonitorReport</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./api/template&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;<span class="variable constant_">USER_NAME_SESSION</span>, <span class="variable constant_">USER_ID_SESSION</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./common/storage&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> <span class="title class_">MonitorOffice</span> <span class="keyword">from</span> <span class="string">&quot;./components/monitor-office&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">MonitorOffice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 上传文件参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">header</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title class_">Authorization</span>: <span class="string">`bearer <span class="subst">$&#123;<span class="variable language_">sessionStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)&#125;</span>`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">action</span>: axios.<span class="property">defaults</span>.<span class="property">baseURL</span> + <span class="string">&quot;/report/document/template&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">file</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// office配置参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">option</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">isEdit</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">fileType</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">title</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">pageLoading</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="title function_">init</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="title class_">GetMonitorReport</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 上传文件的格式验证</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">handleFormatError</span>(<span class="params">file</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">$Message</span>.<span class="title function_">warning</span>(file.<span class="property">name</span> + <span class="string">&#x27;格式不正确&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 上传之前</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">handleBeforeUpload</span>(<span class="params">file</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">file</span> = file;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="title function_">onUpload</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onUpload</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> _baseURL = axios.<span class="property">defaults</span>.<span class="property">baseURL</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">action</span> = <span class="string">`<span class="subst">$&#123;_baseURL&#125;</span>/report/document/template`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">upload</span>.<span class="title function_">post</span>(<span class="variable language_">this</span>.<span class="property">file</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 导入成功时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">handleSuccess</span>(<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">$Message</span>.<span class="title function_">success</span>(<span class="string">&quot;上传成功&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 这里重新上传文件，only office不会覆盖，所以先刷新解决</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// location.reload();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="title class_">GetMonitorReport</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 获取项目下监察报告模板</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">GetMonitorReport</span>() &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">pageLoading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title class_">GetMonitorReport</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">let</span> data = res.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">if</span> (data) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="variable language_">this</span>.<span class="property">option</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="attr">url</span>: data.<span class="property">fileViewPath</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="attr">fileType</span>: data.<span class="property">fileType</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="attr">isEdit</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">this</span>.<span class="property">pageLoading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.monitor-report</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.up-class</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.office</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置项中documentType-动态设置"><a href="#配置项中documentType-动态设置" class="headerlink" title="配置项中documentType 动态设置"></a>配置项中documentType 动态设置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleDocType</span>(<span class="params">fileType</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> docType = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> fileTypesDoc = [</span><br><span class="line">        <span class="string">&#x27;doc&#x27;</span>, <span class="string">&#x27;docm&#x27;</span>, <span class="string">&#x27;docx&#x27;</span>, <span class="string">&#x27;dot&#x27;</span>, <span class="string">&#x27;dotm&#x27;</span>, <span class="string">&#x27;dotx&#x27;</span>, <span class="string">&#x27;epub&#x27;</span>, <span class="string">&#x27;fodt&#x27;</span>, <span class="string">&#x27;htm&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;mht&#x27;</span>, <span class="string">&#x27;odt&#x27;</span>, <span class="string">&#x27;ott&#x27;</span>, <span class="string">&#x27;pdf&#x27;</span>, <span class="string">&#x27;rtf&#x27;</span>, <span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;djvu&#x27;</span>, <span class="string">&#x27;xps&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">let</span> fileTypesCsv = [</span><br><span class="line">        <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;fods&#x27;</span>, <span class="string">&#x27;ods&#x27;</span>, <span class="string">&#x27;ots&#x27;</span>, <span class="string">&#x27;xls&#x27;</span>, <span class="string">&#x27;xlsm&#x27;</span>, <span class="string">&#x27;xlsx&#x27;</span>, <span class="string">&#x27;xlt&#x27;</span>, <span class="string">&#x27;xltm&#x27;</span>, <span class="string">&#x27;xltx&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">let</span> fileTypesPPt = [</span><br><span class="line">        <span class="string">&#x27;fodp&#x27;</span>, <span class="string">&#x27;odp&#x27;</span>, <span class="string">&#x27;otp&#x27;</span>, <span class="string">&#x27;pot&#x27;</span>, <span class="string">&#x27;potm&#x27;</span>, <span class="string">&#x27;potx&#x27;</span>, <span class="string">&#x27;pps&#x27;</span>, <span class="string">&#x27;ppsm&#x27;</span>, <span class="string">&#x27;ppsx&#x27;</span>, <span class="string">&#x27;ppt&#x27;</span>, <span class="string">&#x27;pptm&#x27;</span>, <span class="string">&#x27;pptx&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">if</span> (fileTypesDoc.<span class="title function_">includes</span>(fileType)) &#123;</span><br><span class="line">        docType = <span class="string">&#x27;text&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileTypesCsv.<span class="title function_">includes</span>(fileType)) &#123;</span><br><span class="line">        docType = <span class="string">&#x27;spreadsheet&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileTypesPPt.<span class="title function_">includes</span>(fileType)) &#123;</span><br><span class="line">        docType = <span class="string">&#x27;presentation&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> docType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 插件使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue面试题</title>
      <link href="/2023/05/25/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/05/25/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>继续整理，本篇以vue为主，如需其他，请阅读其他文章。</p><h2 id="vue双向绑定"><a href="#vue双向绑定" class="headerlink" title="vue双向绑定"></a>vue双向绑定</h2><ul><li>Vue 的双向数据绑定是通过 <font color=##00FF00>v-model</font> 指令实现的。</li><li>当数据模型的属性值发生变化时，Vue 会自动检测到变化，并更新对应的视图。</li><li>当用户与视图进行交互，例如在输入框中输入文本时，v-model 指令会监听用户的输入事件。</li><li>当用户输入发生变化时，v-model 会自动更新数据模型的属性值，确保数据的同步更新。</li><li>数据模型的更新会触发 Vue 的响应式系统，进而更新相关的视图。</li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>在编译阶段，Vue.js 会将 v-model 解析为一个属性和一个事件。</li><li>属性部分是绑定数据的值，通常是一个变量。</li><li>事件部分是监听输入事件，一般是 input 事件，可以通过修饰符指定其他事件，如 change、keyup 等。</li><li>当用户在表单元素中输入内容时，触发对应的输入事件。</li><li>Vue.js 捕获到输入事件后，将用户输入的值更新到绑定的属性上，实现数据的更新。</li><li>同时，v-model 还会将最新的属性值反映到表单元素的 value 属性上，确保视图和数据的同步。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><pre><code>- 在实例初始化之后、数据观测 (data observation) 和 event/watcher 事件配置之前被调用。- &lt;font color=#00FF00&gt;无法访问到组件的数据和方法&lt;/font&gt;</code></pre><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><pre><code>- 在实例创建完成后被立即调用。- &lt;font color=#00FF00&gt;可以访问到组件的数据和方法。&lt;/font&gt;- 通常在这个阶段进行数据的初始化、异步请求的发起等操作。</code></pre><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3><pre><code>- 在挂载开始之前被调用- 模板编译已经完成，但&lt;font color=#00FF00&gt;尚未将组件挂载到页面上&lt;/font&gt;。</code></pre><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><pre><code>- 在挂载完成后被调用- 组件已经被挂载到页面上，&lt;font color=#00FF00&gt;可以操作 DOM 元素、进行初始化&lt;/font&gt;工作或与第三方库进行集成。</code></pre><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><pre><code>- 在数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前。- 可以进行一些数据的预处理或在更新前进行额外的操作。</code></pre><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><pre><code>- 在数据更新完成后被调用，发生在虚拟 DOM 重新渲染和打补丁之后- 组件已经重新渲染，&lt;font color=#00FF00&gt;可以执行 DOM 操作&lt;/font&gt;。</code></pre><h3 id="beforeUnmount-Vue-3-x-x2F-beforeDestroy-Vue-2-x"><a href="#beforeUnmount-Vue-3-x-x2F-beforeDestroy-Vue-2-x" class="headerlink" title="beforeUnmount (Vue 3.x) &#x2F; beforeDestroy (Vue 2.x)"></a>beforeUnmount (Vue 3.x) &#x2F; beforeDestroy (Vue 2.x)</h3><pre><code>- 进行一些&lt;font color=#00FF00&gt;清理&lt;/font&gt;清理工作，如清除定时器、取消订阅等。</code></pre><h3 id="unmounted-Vue-3-x-x2F-destroyed-Vue-2-x"><a href="#unmounted-Vue-3-x-x2F-destroyed-Vue-2-x" class="headerlink" title="unmounted (Vue 3.x) &#x2F; destroyed (Vue 2.x)"></a>unmounted (Vue 3.x) &#x2F; destroyed (Vue 2.x)</h3><pre><code>- 在组件销毁完成后被调用。此时，组件已经被销毁，可以进行最后的清理工作。</code></pre><h2 id="计算属性和侦听器的区别"><a href="#计算属性和侦听器的区别" class="headerlink" title="计算属性和侦听器的区别"></a>计算属性和侦听器的区别</h2><ul><li>计算属性使用<font color=#00FF00>computed</font>声明；侦听器使用<font color=#00FF00>watch</font>声明</li><li>计算属性的值会根据依赖的数据进行<font color=#00FF00>缓存</font>，只有当依赖的数据发生变化时，才会重新计算。</li><li>计算属性的值会随着依赖的数据变化而自动更新，即当依赖的数据发生变化时，计算属性会自动重新计算并返回新的值。</li><li>可以通过字符串形式监听单个数据，也可以通过函数形式监听多个数据。监听的数据发生变化时，侦听器会执行相应的回调函数。</li><li>侦听器中的回调函数可以执行<font color=#00FF00>异步操作</font>，例如发送网络请求、操作 DOM 等。</li></ul><h2 id="Vue组件通信的方式"><a href="#Vue组件通信的方式" class="headerlink" title="Vue组件通信的方式"></a>Vue组件通信的方式</h2><h3 id="Props-x2F-emit"><a href="#Props-x2F-emit" class="headerlink" title="Props &#x2F; $emit"></a>Props &#x2F; $emit</h3><pre><code>- 父组件通过 &lt;font color=#00FF00&gt;Props&lt;/font&gt; 将数据传递给子组件，子组件通过 &lt;font color=#00FF00&gt;$emit&lt;/font&gt; 发送事件给父组件</code></pre><h3 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h3><pre><code>- 父组件通过 &lt;font color=#00FF00&gt;$refs&lt;/font&gt; 引用子组件实例，并直接调用子组件的方法或访问子组件的属性</code></pre><h3 id="事件总线（Event-Bus）"><a href="#事件总线（Event-Bus）" class="headerlink" title="事件总线（Event Bus）"></a>事件总线（Event Bus）</h3><pre><code>- 创建一个全局的事件中心，用于父子组件之间的通信- 父组件通过事件中心 &lt;font color=#00FF00&gt;$emit&lt;/font&gt; 发送事件，子组件通过事件中心 &lt;font color=#00FF00&gt;$on&lt;/font&gt; 监听事件并做出响应- 适合用于兄弟组件之间的通信或者跨层级的组件通信。</code></pre><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><pre><code>- Vuex 是 Vue 的状态管理库，可以用于管理应用的共享状态</code></pre><h3 id="parent-x2F-children"><a href="#parent-x2F-children" class="headerlink" title="$parent &#x2F; $children"></a>$parent &#x2F; $children</h3><pre><code>- 父组件可以通过 &lt;font color=#00FF00&gt;$children&lt;/font&gt; 访问直接子组件的实例，子组件可以通过 &lt;font color=#00FF00&gt;$parent&lt;/font&gt; 访问父组件的实例。- 直接访问父子组件的实例会增加组件间的耦合性，不够灵活。</code></pre><h2 id="Vuex-的核心概念和基本用法。"><a href="#Vuex-的核心概念和基本用法。" class="headerlink" title="Vuex 的核心概念和基本用法。"></a>Vuex 的核心概念和基本用法。</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><pre><code>- 存储应用程序的共享状态- 可以通过 &lt;font color=#00FF00&gt;this.$store.state&lt;/font&gt; 访问</code></pre><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><pre><code>- 类似于计算属性，Getter 可以对状态进行计算和处理，并返回结果- 使用时需要定义在 getters 对象中- 通过 &lt;font color=#00FF00&gt;this.$store.getters&lt;/font&gt; 访问</code></pre><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><pre><code>- Mutation 是一个同步函数，接收状态作为参数，并对状态进行修改- 使用时需要定义在 mutations 对象中- 通过 &lt;font color=#00FF00&gt;this.$store.commit&lt;/font&gt; 提交</code></pre><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><pre><code>- 类似于 Mutation，但可以处理异步操作- 完成后提交 Mutation 来修改状态- 使用时需要定义在 actions 对象中- 通过 &lt;font color=#00FF00&gt;this.$store.dispatch&lt;/font&gt; 分发</code></pre><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><pre><code>- 用于将 Vuex 的状态划分为多个模块，每个模块可以拥有自己的 state、getters、mutations 和 actions</code></pre><h2 id="Vue-中的动画是如何实现的"><a href="#Vue-中的动画是如何实现的" class="headerlink" title="Vue 中的动画是如何实现的"></a>Vue 中的动画是如何实现的</h2><h3 id="过渡类名"><a href="#过渡类名" class="headerlink" title="过渡类名"></a>过渡类名</h3><pre><code>- v-enter- v-enter-active- v-enter-to- v-leave- v-leave-active- v-leave-to</code></pre><h3 id="过渡钩子函数"><a href="#过渡钩子函数" class="headerlink" title="过渡钩子函数"></a>过渡钩子函数</h3><pre><code>- before-enter- enter- after-enter- enter-cancelled- before-leave- leave- after-leave- leave-cancelled</code></pre><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><pre><code>- in-out: 表示新元素先进行过渡，然后旧元素离开过渡- in-out: 表示旧元素先进行过渡，然后新元素进入过渡</code></pre><p>  <font color=#00FFFF>例：</font><br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> <span class="attr">key</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 进入过渡的元素 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggleShow&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">show</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">toggleShow</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-active</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: opacity <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><ul><li>虚拟DOM（Virtual DOM）是一种在内存中构建和操作的抽象DOM表示。它是由Vue和其他一些JavaScript库使用的技术，旨在提高DOM操作的性能和效率。</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code>- 初始渲染：当应用程序加载时，Vue会将组件的模板解析成虚拟DOM树。- 更新触发：当组件的数据发生变化时，Vue会生成一个新的虚拟DOM树。- 对比差异：Vue会将新旧虚拟DOM树进行对比，找出它们之间的差异。- 更新DOM：根据差异的结果，Vue只会更新需要变化的部分到实际的DOM中，而不是重新渲染整个组件。</code></pre><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><pre><code>- 提高性能：通过对比差异并只更新需要变化的部分，&lt;font color=#00FF00&gt;减少了对实际DOM的操作和重绘&lt;/font&gt;，从而提高了性能。- 简化开发：开发者可以专注于组件的状态和逻辑，而不需要手动操作DOM。虚拟DOM会自动处理DOM更新的细节。- 跨平台能力：虚拟DOM是与平台无关的中间层，可以在不同的环境中使用，如浏览器、移动端和服务器端。</code></pre><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><ul><li>单文件组件（Single File Component，SFC）是Vue中一种组织代码的方式，它将组件的模板、脚本和样式都封装在一个文件中，通常使用<font color=#00FF00>.vue</font>作为文件扩展名。</li></ul><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><pre><code>- 模块化开发： 将一个组件的所有相关代码放在同一个文件中，提高了代码的可维护性和复用性。- 可读性增强：相关的部分可以紧密地结合在一起，便于查找和修改。- 构建工具支持： 可以与构建工具（如Webpack、Vue CLI等）配合使用，通过预处理器（如Babel、TypeScript、Sass等）进行编译和打包。</code></pre><h3 id="创建单文件组件"><a href="#创建单文件组件" class="headerlink" title="创建单文件组件"></a>创建单文件组件</h3><pre><code>- 一般以.vue为扩展名的文件，并在文件中编写组件的模板、脚本和样式。- 通过导入单文件组件，然后在模板中使用自定义的组件标签来引用和渲染组件。</code></pre><h2 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h2><ul><li>mixin是Vue中的一种机制，用于提取和共享组件的可复用逻辑</li><li>可以减少重复编写代码，提高代码复用性和维护性</li><li>使用mixin时需要注意命名冲突、依赖关系和全局污染等问题</li></ul><h3 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h3><pre><code>- 代码复用：将常用的逻辑抽离为mixin，可以在多个组件中共享，避免重复编写相同的代码。- 灵活性：mixin的选项可以与组件的选项进行合并，提供了一种灵活的扩展和定制组件的方式- 维护性：将共享的逻辑放在mixin中，可以集中管理和维护，减少代码冗余和维护成本。</code></pre><h3 id="使用时需要注意以下几点："><a href="#使用时需要注意以下几点：" class="headerlink" title="使用时需要注意以下几点："></a>使用时需要注意以下几点：</h3><pre><code>- 命名冲突：如果多个mixin中有相同的选项（如数据、方法），在合并到组件中时可能会发生命名冲突。可以使用命名空间或前缀来避免冲突。- 依赖关系：mixin中的选项会与组件的选项进行合并，&lt;font color=#00FF00&gt;如果存在相同选项，组件选项会覆盖mixin中的选项&lt;/font&gt;。需要注意合并顺序和依赖关系，确保最终合并的结果符合预期。- 全局污染：mixin中的选项会被混入到所有使用该mixin的组件中，可能会导致全局污染和意外的副作用。需要谨慎使用，并确保mixin中的选项与组件的选项不产生冲突。</code></pre><h2 id="vue中key的作用"><a href="#vue中key的作用" class="headerlink" title="vue中key的作用"></a>vue中key的作用</h2><ul><li>key属性是用于给Vue的列表渲染（v-for指令）中的每个元素分配一个<font color=#00FF00>唯一标识</font>的特殊属性。</li></ul><h3 id="使用时注意事项"><a href="#使用时注意事项" class="headerlink" title="使用时注意事项"></a>使用时注意事项</h3><pre><code>- key的值应该是唯一且稳定的，最好使用每个元素在列表中的唯一标识作为key值，以确保元素身份的正确追踪。- 不推荐使用随机数或索引作为key值，因为它们在列表顺序变化时可能会导致错误的更新行为。- 当使用组件进行列表渲染时，key属性也会影响到组件的复用。不同key值的组件会被视为不同的实例，而相同key值的组件会被视为同一个实例，以实现组件的高效复用。</code></pre><h2 id="vue常用指令"><a href="#vue常用指令" class="headerlink" title="vue常用指令"></a>vue常用指令</h2><ul><li>v-model：用于实现表单元素与Vue实例数据的双向绑定。</li><li>v-bind：用于动态绑定属性或绑定Vue实例中的数据到HTML元素上。</li><li>v-if：根据表达式的值来条件性地渲染DOM元素。</li><li>v-for：用于循环渲染数组或对象的每个元素。</li><li>v-on：用于监听DOM事件，触发相应的Vue实例方法。</li><li>v-show：根据表达式的值来显示或隐藏DOM元素。</li><li>v-text：用于设置元素的文本内容。</li><li>v-html：用于将HTML代码作为元素的内容进行渲染。</li><li>v-cloak：用于解决Vue编译过程中的闪烁问题，一般与CSS配合使用。</li></ul><h2 id="v-if与v-show区别"><a href="#v-if与v-show区别" class="headerlink" title="v-if与v-show区别"></a>v-if与v-show区别</h2><ul><li>v-if 指令根据表达式的值来动态地<font color=#00FF00>添加或移除</font>元素</li><li>v-show 指令也是根据表达式的值来控制元素的<font color=#00FF00>显示和隐藏</font></li><li>v-if 有更高的切换开销</li><li>需要频繁切换的场景中，建议使用v-show</li></ul><h2 id="v-if与v-for一起使用"><a href="#v-if与v-for一起使用" class="headerlink" title="v-if与v-for一起使用"></a>v-if与v-for一起使用</h2><ul><li>vue2中，当它们同时存在于同一个元素上时，Vue 会先执行 v-for 循环，然后再在每次循环中根据 v-if 的条件判断是否渲染对应的元素，会产生不必要的性能开销。</li><li>vue3 可以在template上使用v-for。</li><li>vue3 以在同一个元素上同时使用， 并且只进行一次判断。</li></ul><h2 id="vue常用修饰符"><a href="#vue常用修饰符" class="headerlink" title="vue常用修饰符"></a>vue常用修饰符</h2><ul><li>.prevent：阻止默认事件行为。</li><li>.stop：阻止事件冒泡。</li><li>.once：只触发一次事件，即事件处理程序只会执行一次。</li><li>.capture：使用事件捕获模式，即从外部元素开始触发事件。</li><li>.self：只在触发事件的元素自身上触发事件，而不是其子元素。</li><li>.passive：使事件监听器为被动模式，不会调用 preventDefault()，可以提高滚动性能。</li><li>.sync：用于实现父子组件之间的双向数据绑定。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端js面试题</title>
      <link href="/2023/05/23/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/05/23/js%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>继续整理，本篇以js内容为主，如需其他，请阅读其他文章。</p><h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>Number 数字类型</li><li>String 字符串类型</li><li>Boolean 布尔值</li><li>Null 空值</li><li>Undefined 未定义</li><li>Object 对象</li><li>Array 数组</li><li>Symbol 表示唯一的、不可变的值，用于创建对象的唯一标识符。Symbol 在 ES6 中引入。</li><li>BigInt 数值太大的数字类型</li></ul><h3 id="特殊数据类型"><a href="#特殊数据类型" class="headerlink" title="特殊数据类型"></a>特殊数据类型</h3><ul><li>Function 函数数据类型</li></ul><h2 id="检测数据类型的方式"><a href="#检测数据类型的方式" class="headerlink" title="检测数据类型的方式"></a>检测数据类型的方式</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><ul><li>typeof 是一个一元操作符，用于获取一个值的类型。它返回一个表示数据类型的<font color=#9900CC>字符串</font>。</li><li>返回值为字符串。</li><li>可以准确的判断出<font color=#9900CC>基本数据类型</font>和<font color=#9900CC>Funtcion</font>，其他均为object。<br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">42</span>; <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// &quot;object&quot; (注意这是一个历史遗留问题，null 被错误地判断为对象)</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;; <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;; <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ul><li>instanceof 操作符用于检查一个对象是否是某个构造函数创建的实例。它可以<font color=#9900CC>判断对象是否属于特定的类型或其子类型</font>。</li><li>返回值为<font color=#9900CC>Boolean</font>Boolean值。</li><li>对于原始值（如数字、字符串、布尔值等），使用 instanceof 操作符会返回 false，因为原始值不是对象。</li><li>而对于对象类型（如数组、函数、对象等），instanceof 可以判断其是否属于特定类型或其子类型。<br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num <span class="keyword">instanceof</span> <span class="title class_">Number</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bool <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> undef = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(undef <span class="keyword">instanceof</span> <span class="title class_">Undefined</span>); <span class="comment">// 报错，Undefined 不是一个构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nul = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nul <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func <span class="keyword">instanceof</span> <span class="title class_">Function</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="手写实现instanceof"><a href="#手写实现instanceof" class="headerlink" title="手写实现instanceof"></a>手写实现instanceof</h3>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj, constructor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (prototype !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prototype === constructor.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    prototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(prototype);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h3><ul><li>Array.isArray() 是一个静态方法，用于检查一个值是否是数组类型。</li><li>返回值为<font color=#9900CC>Boolean</font>。<br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h3><ul><li>Object.prototype.toString() 是 Object 原型上的方法</li><li>返回值为<font color=#9900CC>对象类型的字符串</font><br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">42</span>); <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>); <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>); <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;); <span class="comment">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var, let, const"></a>var, let, const</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ul><li>函数作用域：var 声明的变量具有函数作用域，即变量的作用范围限定在声明它的函数内部。</li><li>变量提升：使用 var 声明的变量会发生<font color=#9900CC>变量提升</font>，即在函数内部，无论在哪里声明变量，变量声明都会被提升到函数的顶部。</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>块级作用域：let 声明的变量具有<font color=#9900CC>块级作用域</font>，即变量的作用范围限定在当前代码块内部（如 {} 中）。</li><li>没有变量提升：使用 let 声明的变量<font color=#9900CC>不会发生变量提升</font>，只有在变量<font color=#9900CC>声明之后才能访问</font>。</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>块级作用域：const 声明的变量具有<font color=#9900CC>块级作用域</font>。</li><li>常量赋值：const 声明的变量<font color=#9900CC>必须在声明时进行初始化</font>，并且<font color=#9900CC>不能再次赋值</font>。它的值是不可变的。</li></ul><h2 id="作用域-amp-amp-作用域链"><a href="#作用域-amp-amp-作用域链" class="headerlink" title="作用域&amp;&amp;作用域链"></a>作用域&amp;&amp;作用域链</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>全局作用域： 全局作用域是在整个 JavaScript 程序中可访问的最外层作用域。在全局作用域中声明的变量和函数可以被程序中的任何部分访问。</li><li>函数作用域： 函数作用域是在函数内部声明的变量的作用域范围。函数作用域中的变量只能在函数内部访问，而无法在函数外部或其他函数中访问。</li><li>块级作用域： 块级作用域是在代码块（如 if、for、while 语句等）中声明的变量的作用域范围。块级作用域中的变量只能在该代码块内部访问，而在代码块外部是不可见的。<br>  <font color=red>注：</font> 如果一个变量没有声明直接使用：<ul><li>严格模式下：报错（ReferenceError: x is not defined）</li><li>非严格模式下：JavaScript 引擎将隐式地将该变量视为<font color=red>全局变量</font>，并返回其值为 undefined</li></ul></li></ul><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ul><li>作用域链（Scope Chain）是 JavaScript 中用于查找变量的机制。当代码中引用一个变量时，JavaScript 引擎会按照特定的规则沿着作用域链进行变量查找，直到找到匹配的变量或达到最外层的全局作用域。</li><li>作用域链的构建是根据变量的词法环境（Lexical Environment）进行的。每当创建一个新的执行上下文（函数执行上下文或全局执行上下文），就会创建一个新的词法环境，并将其与当前的词法环境形成一个链式结构。</li><li>当访问一个变量时，JavaScript 引擎首先在当前的词法环境中查找该变量，如果找到了就使用它。如果没有找到，则继续沿着作用域链向上查找，直到找到匹配的变量或到达全局作用域。</li><li>如果在最外层的全局作用域中仍然没有找到该变量，那么会抛出一个引用错误。</li></ul><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><h3 id="标记清楚法"><a href="#标记清楚法" class="headerlink" title="标记清楚法"></a>标记清楚法</h3><ul><li>在标记阶段，垃圾回收器从根对象开始遍历所有可访问的对象，并标记活动对象。</li><li>在清除阶段，垃圾回收器清除所有未被标记的对象，释放它们占用的内存空间。</li></ul><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><ul><li>每当一个对象被引用时，引用计数加一；</li><li>当一个对象的引用被删除或覆盖时，引用计数减一。</li><li>当引用计数为零时，即没有任何引用指向该对象，该对象被判定为垃圾并被回收。<br>  <font color=red>注：</font>引用计数方法无法解决循环引用的问题，即对象之间相互引用导致引用计数无法归零的情况。</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li>JavaScript 闭包（Closure）是指在<font color=#9900CC>函数内部创建的函数</font>，它可以访问外部函数的变量和作用域，即使外部函数已经执行完毕，闭包仍然可以保持对外部变量的引用。</li></ul><h3 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h3><ul><li>内部函数可以访问外部函数的变量和参数</li><li>外部函数的变量不会被销毁</li></ul><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><ul><li>封装私有变量：通过闭包可以<font color=#9900CC>创建私有变量</font>，外部无法直接访问，只能通过闭包提供的接口进行访问和修改。这种方式可以实现数据的封装和保护。</li><li>延迟执行：通过闭包可以创建一个延迟执行的函数，即将一部分逻辑包裹在闭包中，并在需要时执行。这对于实现定时器、事件监听等场景很有用。</li><li>记忆化：闭包可以用于缓存中间计算结果，以避免重复计算。通过在闭包中保存计算结果，可以提高代码的执行效率。<br>  <font color=red>注：</font>闭包的使用需要注意内存管理，因为闭包会持有外部函数的变量引用，如果不及时释放闭包，可能会导致<font color=red>内存泄漏。</font></li></ul><h3 id="释放闭包："><a href="#释放闭包：" class="headerlink" title="释放闭包："></a>释放闭包：</h3><ul><li>如果存在其他对象或函数持有对闭包的引用，可以通过将这些引用置为 <font color=#9900CC>null</font> 或者取消相关的事件监听来释放闭包。</li><li>让垃圾回收器自动回收不再使用的闭包所占用的内存。</li></ul><h3 id="避免内存泄漏和资源占用"><a href="#避免内存泄漏和资源占用" class="headerlink" title="避免内存泄漏和资源占用"></a>避免内存泄漏和资源占用</h3><ul><li>及时解除事件监听</li><li>避免循环引用</li><li>尽量避免使用长期存在的闭包</li></ul><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><ul><li>默认情况:this指向window（严格模式下为undefined）</li><li>对象绑定:作为对象的方法调用时，this指向该对象</li><li>方法改变: call,apply,bind改变this</li><li>new 绑定： this 指向新创建的实例对象。</li><li>箭头函数： 箭头函数中的 this 绑定是词法上的，指向外层作用域的 this 值，而不是被调用时的上下文对象。<br>  <font color=red>注：</font> 箭头函数无法通过call，apply，bind改变。</li></ul><h2 id="new实例化"><a href="#new实例化" class="headerlink" title="new实例化"></a>new实例化</h2><ul><li>创建一个空对象</li><li>将对象的原型设置为函数的peototype属性</li><li>将函数的this指向这个对象，执行构造函数的代码，给对象添加属性</li><li>判断函数的返回类型，如果是值类型，则返回这个对象，如果是引用类型，则返回引用类型</li></ul><h2 id="原型-amp-amp-原型链"><a href="#原型-amp-amp-原型链" class="headerlink" title="原型&amp;&amp;原型链"></a>原型&amp;&amp;原型链</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><pre><code>- 在 JavaScript 中，每个对象都有一个原型（prototype）属性，它指向另一个对象，这个对象就是该对象的原型。原型对象可以包含共享的属性和方法，可以被对象实例共享和访问。</code></pre><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><pre><code>- 函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范</code></pre><p>  <font color=#00FFFF>例：</font><br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Person 构造函数的原型对象上定义一个方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象实例</span></span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象实例的方法</span></span><br><span class="line">john.<span class="title function_">sayHello</span>(); <span class="comment">// 输出 &quot;Hello, my name is John!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式访问原型对象上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="title function_">toString</span>()); <span class="comment">// 输出 &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); <span class="comment">// 输出 null</span></span><br></pre></td></tr></table></figure></p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><pre><code>- 事件循环（Event Loop）是 JavaScript 中处理异步操作的一种机制。它负责协调和执行 JavaScript 代码，使得异步任务能够按照特定的顺序和时机执行。- JavaScript 是单线程的，意味着一次只能执行一个任务。但是在实际开发中，经常会遇到需要执行异步操作的情况，比如网络请求、定时器、事件监听等。为了处理这些异步操作，JavaScript 引入了事件循环机制。</code></pre><h3 id="事件循环机制的主要组成部分包括以下几个要素"><a href="#事件循环机制的主要组成部分包括以下几个要素" class="headerlink" title="事件循环机制的主要组成部分包括以下几个要素"></a>事件循环机制的主要组成部分包括以下几个要素</h3><pre><code>- 调用栈（Call Stack）：用于存储执行上下文的栈结构，用来跟踪代码的执行位置。- 任务队列（Task Queue）：用于存储异步任务的队列，比如网络请求回调、定时器回调等。- 事件循环（Event Loop）：负责监听调用栈和任务队列，当调用栈为空时，从任务队列中取出任务并推入调用栈执行。</code></pre><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><pre><code>- 代码从上到下依次执行，遇到异步任务时，将其推入任务队列而不会阻塞代码的执行。- 当调用栈为空时，事件循环会检查任务队列。- 如果任务队列中有任务，则选择其中最早进入队列的任务，将其推入调用栈执行。- 执行任务时，可能会产生新的异步任务，将其推入任务队列。- 重复步骤 2-4，直到任务队列为空。</code></pre><ul><li>事件循环中有宏任务和微任务的区分</li></ul><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><pre><code>- 整体代码块（Script）：整个脚本代码作为一个宏任务执行。- setTimeout 和 setInterval：定时器任务。- I/O 操作：包括文件读写、网络请求等异步 I/O 操作。- UI 渲染：更新页面布局、样式等操作。- requestAnimationFrame：用于实现动画效果的定时器。- 事件监听器回调：如点击事件、键盘事件等。</code></pre><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><pre><code>- Promise 回调：在 Promise 的状态改变时执行的回调函数。- MutationObserver 回调：监测 DOM 变化时执行的回调函数。- process.nextTick（Node.js 环境）：在当前操作结束后立即执行的回调函数。</code></pre><p>  <font color=red>注：事件循环</font>的执行过程中，宏任务的优先级高于微任务。<br>  <font color=red>注：任务队列</font>的执行过程中，微任务的优先级高于宏任务。<br>  <font color=#00FFFF>例：</font><br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">syncCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">asyncCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">syncCode</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">asyncCode</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">execute</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &lt;!-- 代码执行顺序的解释如下：</span><br><span class="line"></span><br><span class="line">  首先执行 <span class="title function_">syncCode</span>() 函数，输出 <span class="number">1</span>。</span><br><span class="line">  使用 <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>) 实现一个 <span class="number">1</span> 秒的延迟。</span><br><span class="line">  输出 <span class="number">3</span>。</span><br><span class="line">  执行 <span class="title function_">asyncCode</span>() 函数，其中包含一个 <span class="number">1</span> 秒的延迟，在延迟结束后输出 <span class="number">2</span>。</span><br><span class="line">  输出 <span class="number">4</span>。</span><br><span class="line">  使用 <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>) 实现一个 <span class="number">1</span> 秒的延迟。</span><br><span class="line">  输出 <span class="number">5</span>。</span><br><span class="line">  使用 <span class="title class_">Promise</span> 的 then 方法进行连续的延时操作，分别输出 <span class="number">6</span>、<span class="number">7</span>、<span class="number">8</span>。</span><br><span class="line">  最后使用 then 方法输出 <span class="number">9</span>。 --&gt;</span><br></pre></td></tr></table></figure></p><h2 id="防抖-amp-amp-节流"><a href="#防抖-amp-amp-节流" class="headerlink" title="防抖&amp;&amp;节流"></a>防抖&amp;&amp;节流</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><ul><li>在事件触发后等待一段时间，如果在这段时间内没有再次触发该事件，才执行对应的操作。如果在等待时间内又触发了该事件，就重新开始计时。<br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> debouncedFunction = <span class="title function_">debounce</span>(myFunction, <span class="number">300</span>);</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, debouncedFunction);</span><br></pre></td></tr></table></figure></li></ul><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><ul><li>控制事件的触发频率，保证一定时间内只触发一次该事件。在设定的时间间隔内，不管事件触发了多少次，只有一次事件处理函数执行。<br>  <font color=#00FFFF>例：</font>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> throttledFunction = <span class="title function_">throttle</span>(myFunction, <span class="number">300</span>);</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, throttledFunction);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><pre><code>- Promise 是 JavaScript 中用于处理异步操作的一种机制。它可以避免回调地狱的问题，并提供了一种更优雅的方式来处理异步代码。- 它可以有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。- 状态只可以改变一次（ pending ==&gt; fulfilled ||  pending ==&gt; rejected ）- 可以通过.then()链式调用,每个 .then() 方法都返回一个新的 Promise 对象;- .then() 方法来注册操作成功时的处理函数，使用 .catch() 方法来注册操作失败时的处理函数。</code></pre><p>  基本语法 <font color=#00FFFF>例：</font><br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 异步操作</span></span><br><span class="line">  <span class="comment">// 如果操作成功，调用 resolve(value)</span></span><br><span class="line">  <span class="comment">// 如果操作失败，调用 reject(error)</span></span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理操作成功的结果</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理操作失败的结果</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><pre><code>#### Promise.resolve  - Promise.resolve(value)：返回一个以给定值解析后的 Promise 对象。如果传入的值本身就是一个 Promise，则直接返回该 Promise。  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出 42</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>#### Promise.reject  - Promise.reject(reason)：返回一个带有指定拒绝原因的 Promise 对象。  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Something went wrong&#x27;</span>));</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error); <span class="comment">// 输出错误信息：Something went wrong</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>#### Promise.all  - Promise.all(iterable)：接收一个可迭代对象（如数组或类数组对象），并返回一个 Promise 对象。  - 该 Promise 对象在所有输入的 Promise 都已成功解析后才会解析，返回一个包含所有 Promise 结果的数组。  - 如果其中任何一个 Promise 被拒绝，则返回的 Promise 会立即被拒绝。  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results); <span class="comment">// 输出 [1, 2, 3]</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>#### Promise.race  - Promise.race(iterable)：接收一个可迭代对象，返回一个 Promise 对象。  - 该 Promise 对象将与第一个解析或拒绝的 Promise 对象具有相同的结果。  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">100</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">200</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">300</span>))</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>(promises)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 1（第一个解析的 Promise 结果）</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></code></pre><h3 id="手写实现Promise-all"><a href="#手写实现Promise-all" class="headerlink" title="手写实现Promise.all"></a>手写实现Promise.all</h3>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPromiseAll</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> results = [];</span><br><span class="line">    <span class="keyword">let</span> resolvedCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      promises[i]</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          results[i] = result;</span><br><span class="line">          resolvedCount++;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (resolvedCount === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(results);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件委托（事件代理）"><a href="#事件委托（事件代理）" class="headerlink" title="事件委托（事件代理）"></a>事件委托（事件代理）</h2><ul><li>JavaScript 中的事件委托（事件代理）是一种常见的事件处理技术，它通过将事件绑定到一个父元素上，利用事件冒泡的特性，在父元素上统一处理子元素的事件。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><pre><code>- 减少内存消耗：只需要一个事件处理程序，而不是为每个子元素都创建一个处理程序，从而减少了内存消耗。- 动态绑定：对于后续添加的子元素，无需再次绑定事件，因为事件委托是基于事件冒泡的，新添加的元素也会受到委托的处理。- 简化代码：通过将事件处理程序绑定到父元素上，可以避免在多个子元素上编写重复的事件处理代码。</code></pre><p>  <font color=#00FFFF>例：</font><br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">nodeName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在点击的列表项上执行操作</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Clicked item:&#x27;</span>, event.<span class="property">target</span>.<span class="property">textContent</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="什么是模块化开发，如何实现模块化开发"><a href="#什么是模块化开发，如何实现模块化开发" class="headerlink" title="什么是模块化开发，如何实现模块化开发"></a>什么是模块化开发，如何实现模块化开发</h2><ul><li>模块化开发是一种软件开发的方法，旨在将代码划分为独立、可维护和可重用的模块。模块化开发有助于提高代码的可读性、可维护性和可测试性，并促进团队合作和代码复用。</li></ul><h3 id="命名空间模式"><a href="#命名空间模式" class="headerlink" title="命名空间模式"></a>命名空间模式</h3><ul><li>使用对象来组织代码，将相关的函数、变量等放在命名空间对象下。这种方式通过避免全局命名冲突来实现模块化。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命名空间模式示例</span></span><br><span class="line"><span class="keyword">var</span> myModule = &#123;</span><br><span class="line">  <span class="comment">// 模块内部的私有数据和函数</span></span><br><span class="line">  <span class="attr">privateData</span>: <span class="string">&#x27;私有数据&#x27;</span>,</span><br><span class="line">  <span class="attr">privateFunction</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 私有函数实现</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 模块内部的公共接口</span></span><br><span class="line">  <span class="attr">publicFunction</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 调用私有函数和访问私有数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h3><ul><li>使用匿名函数创建一个独立的作用域，并立即执行该函数，从而创建模块化的代码。  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IIFE 模块化示例</span></span><br><span class="line"><span class="keyword">var</span> myModule = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模块内部的私有数据和函数</span></span><br><span class="line">  <span class="keyword">var</span> privateData = <span class="string">&#x27;私有数据&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">privateFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 私有函数实现</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块内部的公共接口</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">publicFunction</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 调用私有函数和访问私有数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><h3 id="CommonJS-模块规范"><a href="#CommonJS-模块规范" class="headerlink" title="CommonJS 模块规范"></a>CommonJS 模块规范</h3><ul><li>在服务器端使用广泛的模块化规范，通过 module.exports 导出模块，通过 require 引入模块。  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 模块的公共接口</span></span><br><span class="line">  <span class="attr">publicFunction</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块引入</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./myModule&#x27;</span>);</span><br><span class="line">myModule.<span class="title function_">publicFunction</span>();</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h3><ul><li>在现代 JavaScript 中，使用 import 和 export 关键字实现模块化。它是官方标准的模块化方案，广泛支持于现代浏览器和构建工具中。  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">publicFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 实现代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; publicFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>;</span><br><span class="line"><span class="title function_">publicFunction</span>();</span><br></pre></td></tr></table></figure></li></ul><h2 id="es6模块化和CommonJS的区别"><a href="#es6模块化和CommonJS的区别" class="headerlink" title="es6模块化和CommonJS的区别"></a>es6模块化和CommonJS的区别</h2><ul><li>语法差异<br>ES6 模块化使用 import 和 export 关键字来导入和导出模块。<br>CommonJS 使用 require 函数来导入模块，使用 module.exports 来导出模块。</li><li>加载方式差异<br>ES6 模块化是静态加载的，也就是在代码静态分析阶段就可以确定模块的依赖关系，可以在编译时进行优化和静态分析。<br>CommonJS 是动态加载的，模块的加载和执行是在运行时进行的，无法在编译时进行优化。</li><li>导入导出特性差异<br>ES6 模块化支持命名导入和导出，可以选择性地导入和导出模块中的特定成员。<br>CommonJS 模块化没有内置的命名导入和导出机制，导入的是整个模块对象，可以通过对象属性来访问导出的成员。</li><li>作用域差异<br>ES6 模块化在导入的模块中，顶层的 import 和 export 声明是静态的，模块内部的变量不会污染全局作用域。<br>CommonJS 在导入的模块中，整个模块的内容被加载到一个对象中，模块内部的变量和函数都可以被其他模块访问到。</li><li>运行环境差异<br>ES6 模块化主要用于浏览器环境，也可以通过构建工具（如Webpack、Rollup）在 Node.js 环境中使用。<br>CommonJS 主要用于 Node.js 环境，也可以通过使用转换工具（如Babel）将其转换为浏览器可用的模块。</li></ul><h2 id="如何操作DOM，常见的操作DOM方式有哪些"><a href="#如何操作DOM，常见的操作DOM方式有哪些" class="headerlink" title="如何操作DOM，常见的操作DOM方式有哪些"></a>如何操作DOM，常见的操作DOM方式有哪些</h2><ul><li>通过 ID 选择元素<ul><li>document.getElementById(id): 返回指定 ID 的元素。</li></ul></li><li>通过选择器选择元素<ul><li>document.querySelector(selector): 返回匹配 CSS 选择器的第一个元素。</li><li>document.querySelectorAll(selector): 返回匹配 CSS 选择器的所有元素的 NodeList。</li></ul></li><li>通过标签名选择元素<ul><li>document.getElementsByTagName(tagName): 返回指定标签名的元素集合。</li></ul></li><li>通过类名选择元素<ul><li>document.getElementsByClassName(className): 返回指定类名的元素集合。</li></ul></li><li>创建元素<ul><li>document.createElement(tagName): 创建一个具有指定标签名的元素节点。</li></ul></li><li>修改元素内容和属性<ul><li>element.textContent: 设置或获取元素的文本内容。</li><li>element.innerHTML: 设置或获取元素的 HTML 内容。</li><li>element.setAttribute(name, value): 设置元素的属性。</li><li>element.getAttribute(name): 获取元素的属性值。</li><li>element.style.property &#x3D; value: 设置元素的 CSS 样式。</li></ul></li><li>添加，移除和替换元素<ul><li>element.appendChild(newChild): 在元素的子节点列表末尾添加一个新的子节点。</li><li>element.removeChild(child): 从元素的子节点列表中移除指定的子节点。</li><li>element.replaceChild(newChild, oldChild): 替换元素的指定子节点。</li></ul></li><li>添加和移除事件监听器<ul><li>element.addEventListener(event, listener): 添加事件监听器</li><li>element.removeEventListener(event, listener): 移除事件监听器。</li></ul></li><li>修改元素的样式类<ul><li>element.classList.add(className): 添加类名。</li><li>element.classList.remove(className): 移除类名。</li><li>element.classList.toggle(className): 切换类名的状态。</li></ul></li></ul><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><ul><li>在 JavaScript 中，变量提升（Hoisting）是一种特性，它指的是在代码执行之前，JavaScript 引擎会将变量和函数的声明提升到当前作用域的顶部。</li><li>声明提升<ul><li>在代码执行之前，JavaScript 引擎会扫描当前作用域内的变量声明，并将其提升到作用域顶部。</li><li>可以在变量声明之前使用变量。</li></ul></li><li>函数提升<ul><li>与变量提升类似，JavaScript 引擎还会将函数的声明提升到作用域的顶部</li><li>可以在函数声明之前调用函数。</li></ul></li></ul><h2 id="for-in和for-of的区别"><a href="#for-in和for-of的区别" class="headerlink" title="for in和for of的区别"></a>for in和for of的区别</h2><ul><li>迭代的对象类型<ul><li>for…in 循环用于迭代对象的属性，包括对象自身的可枚举属性以及继承的可枚举属性。</li><li>for…of 循环用于迭代可迭代对象（如数组、字符串、Set、Map 等）的元素值。</li></ul></li><li>迭代的顺序<ul><li>for…in 循环的迭代顺序是不确定的，因为对象的属性没有固定的顺序。</li><li>for…of 循环的迭代顺序是按照可迭代对象的迭代器定义的顺序进行迭代。</li></ul></li><li>迭代变量的类型<ul><li>for…in 循环中的迭代变量是字符串类型，表示对象的属性名。</li><li>for…of 循环中的迭代变量可以是任意类型，表示可迭代对象中的元素值。</li></ul></li><li>可迭代对象的要求<ul><li>for…in 循环适用于任何对象，可以用于迭代普通对象的属性。</li><li>for…of 循环要求迭代的对象实现了迭代器（Iterator）接口，即具有一个 Symbol.iterator 方法。</li></ul></li></ul><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h3><pre><code>- push()：向数组末尾添加一个或多个元素，并返回新数组的长度。- pop()：从数组末尾移除最后一个元素，并返回被移除的元素。- unshift()：向数组开头添加一个或多个元素，并返回新数组的长度。- shift()：从数组开头移除第一个元素，并返回被移除的元素。- splice()：从数组中添加、删除或替换元素。- reverse()：颠倒数组中元素的顺序。- sort()：对数组元素进行排序。- fill()：替换值和起始索引位置（可选）。替换值指定要替换的固定值，起始索引位置指定开始替换的位置，默认为 0。</code></pre><h3 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h3><pre><code>- concat()：将两个或多个数组合并为一个新数组。- join()：将数组中的所有元素连接成一个字符串，并返回该字符串。- slice()：返回数组的指定部分（浅拷贝）。- indexOf()：返回指定元素在数组中的第一个匹配位置的索引。- lastIndexOf()：返回指定元素在数组中最后一个匹配位置的索引。- forEach()：对数组中的每个元素执行指定的函数。- map()：对数组中的每个元素执行指定的函数，并返回一个新数组。- filter()：根据指定的条件过滤数组中的元素，并返回一个新数组。- reduce()：对数组中的元素执行累加器函数，返回一个累计值。- every()：检查数组中的每个元素是否满足指定条件。- some()：检查数组中是否至少有一个元素满足指定条件。- find()：返回数组中满足指定条件的第一个元素。- findIndex()：返回数组中满足指定条件的第一个元素的索引。</code></pre><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ul><li>使用 Set  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArr); <span class="comment">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li>使用 filter() 和 indexOf()  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> array.<span class="title function_">indexOf</span>(value) === index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArr); <span class="comment">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li>使用 reduce() 和 includes()：  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">result, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!result.<span class="title function_">includes</span>(value)) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArr); <span class="comment">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><pre><code>- 递归<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">flattenArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flattened = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      flattened = flattened.<span class="title function_">concat</span>(<span class="title function_">flattenArray</span>(item));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      flattened.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> flattened;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>], <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> flattenedArray = <span class="title function_">flattenArray</span>(nestedArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flattenedArray); <span class="comment">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>- Array.prototype.flat()<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>], <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> flattenedArray = nestedArray.<span class="title function_">flat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flattenedArray); <span class="comment">// 输出 [1, 2, [3, 4], 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>], <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> flattenedArray = nestedArray.<span class="title function_">flat</span>(<span class="number">2</span>); <span class="comment">// 指定扁平化层数为 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flattenedArray); <span class="comment">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>- 扩展运算符+递归<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">result, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(...<span class="title function_">flattenArray</span>(item));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>], <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> flattenedArray = <span class="title function_">flattenArray</span>(nestedArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flattenedArray); <span class="comment">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端css,html面试题</title>
      <link href="/2023/05/22/html,css%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/05/22/html,css%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>近期准备换个坑位，所以整理了一些面试题，希望有用！<br>本篇主要以html和css内容为主，如需其他，请阅读其他文章。</p><h2 id="HTML5-新特性、语义化"><a href="#HTML5-新特性、语义化" class="headerlink" title="HTML5 新特性、语义化"></a>HTML5 新特性、语义化</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><pre><code>HTML5的语义化指的是合理的使用语义化的标签来创建页面结构。【正确的标签做正确的事】</code></pre><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><pre><code>header(头部)  - 通常包含页面的标题、导航菜单、品牌标识等与页面头部相关的内容nav(导航栏)  - 用于表示页面中的导航菜单或导航链接集合。main(内容区域)  - 一般一个页面只应有一个main标签article(表示独立、完整、可以独立分配或复用的内容块的元素)  - article标签应该包含独立的、自包含的内容，而不是被其他元素依赖或嵌套使用section(独立内容区块的元素)  - 用于将相关的内容组织在一起，通常具有一个标题或主题。aside(侧边栏)  - 通常包含与页面主要内容相关但又可以作为补充的内容  - 不仅限于侧边栏的用法，它也可以用于其他附加信息的展示，例如广告、引用、附属内容等footer(底部内容)  - 通常包含与页面相关的版权信息、联系信息、导航链接等。</code></pre><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><pre><code>- 在没CSS样式的情况下，页面整体也会呈现很好的结构效果- 代码结构清晰，易于阅读，- 利于开发和维护 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。- 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重</code></pre><h2 id="css选择器优先级"><a href="#css选择器优先级" class="headerlink" title="css选择器优先级"></a>css选择器优先级</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><pre><code>- 元素选择器：通过元素名称选取元素，如 p 选择所有 &lt;p&gt; 元素。- 类选择器：通过类名选取元素，以.开头，如 .my-class 选择所有具有 my-class 类名的元素。- ID选择器：通过元素的唯一ID选取元素，以#开头，如 #my-id 选择具有 my-id ID的元素。- 属性选择器：通过元素的属性值选取元素，如 [type=&quot;text&quot;] 选择所有 type 属性值为 text 的元素。- 后代选择器：通过元素的后代关系选取元素，使用空格分隔，如 div p 选择所有 &lt;p&gt; 元素，它们是 &lt;div&gt; 元素的后代。- 直接子元素选择器：通过元素的直接子元素关系选取元素，使用 &gt; 分隔，如 div &gt; p 选择所有 &lt;p&gt; 元素，它们是 &lt;div&gt; 元素的直接子元素。- 兄弟选择器：通过元素的兄弟关系选取元素，使用 + 分隔，如 h2 + p 选择紧接在 &lt;h2&gt; 元素后的 &lt;p&gt; 元素。- 伪类选择器：通过元素的状态或特定条件选取元素，以:开头，如 :hover 选择鼠标悬停在元素上的状态。- 伪元素选择器：通过元素的特定部分选取元素，以::开头，如 ::before 选择元素的前置内容。</code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><pre><code>1. ！important2. 内联样式3. ID选择器4. 类选择器，属性选择器，伪类选择器5. 元素选择器，伪元素选择器6. 通配符，子类，相邻选择器</code></pre><h2 id="position-属性的值有哪些及其区别"><a href="#position-属性的值有哪些及其区别" class="headerlink" title="position 属性的值有哪些及其区别"></a>position 属性的值有哪些及其区别</h2><h3 id="static-默认值"><a href="#static-默认值" class="headerlink" title="static(默认值):"></a>static(默认值):</h3><pre><code>- 元素按照正常文档流进行定位，不受 top、right、bottom、left 等属性的影响。</code></pre><h3 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative(相对定位):"></a>relative(相对定位):</h3><pre><code>- 元素相对于其正常位置进行定位，通过设置 top、right、bottom、left 属性来调整元素的位置。相对定位不会影响其他元素的布局。</code></pre><h3 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute(绝对定位):"></a>absolute(绝对定位):</h3><pre><code>- 元素相对于其最近的已定位（非 static）的父元素进行定位，如果没有已定位的父元素，则相对于文档根元素进行定位。通过设置 top、right、 bottom、  left 属性来指定元素的精确位置。绝对定位会使元素脱离正常文档流，并且不会为其保留空间。</code></pre><h3 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed(固定定位):"></a>fixed(固定定位):</h3><pre><code>- 元素相对于视口进行定位，即无论页面滚动与否，元素都会保持在固定位置。通过设置 top、right、bottom、left 属性来指定元素的精确位置。</code></pre><h3 id="sticky-粘性定位"><a href="#sticky-粘性定位" class="headerlink" title="sticky(粘性定位):"></a>sticky(粘性定位):</h3><pre><code>- 元素根据正常文档流进行定位，但在滚动到特定阈值时，会变为固定定位。通过设置 top、right、bottom、left 属性和 top、bottom 等阈值来调整元素的位置和触发条件。</code></pre><h2 id="box-sizing属性-盒模型"><a href="#box-sizing属性-盒模型" class="headerlink" title="box-sizing属性(盒模型)"></a>box-sizing属性(盒模型)</h2><h3 id="content-box-标准盒模型"><a href="#content-box-标准盒模型" class="headerlink" title="content-box(标准盒模型)"></a>content-box(标准盒模型)</h3><pre><code>- 宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。- width 指 content 部分的宽度。</code></pre><h3 id="border-box-IE-盒子模型-怪异盒模型"><a href="#border-box-IE-盒子模型-怪异盒模型" class="headerlink" title="border-box(IE 盒子模型 | 怪异盒模型)"></a>border-box(IE 盒子模型 | 怪异盒模型)</h3><pre><code>- 为元素设定的宽度和高度决定了元素的边框盒。- width 表示 content+padding+border 这三个部分的宽度。</code></pre><h3 id="inherit"><a href="#inherit" class="headerlink" title="inherit"></a>inherit</h3><pre><code>- 继承父元素的 box-sizing 值。</code></pre><h2 id="BFC（块级格式上下文）"><a href="#BFC（块级格式上下文）" class="headerlink" title="BFC（块级格式上下文）"></a>BFC（块级格式上下文）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><pre><code>- 块级格式化上下文（Block Formatting Context，BFC）是CSS中的一个概念，用于描述元素在布局时的一种独立的渲染区域。每个BFC都是一个独立的容器，内部元素的布局不会影响到外部元素。</code></pre><h3 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h3><pre><code>- 内部元素垂直方向的边距会发生重叠：当多个块级元素嵌套在同一个BFC中时，它们的上下边距可能会发生重叠。- BFC可以包含浮动元素：当一个元素触发了BFC，它可以包含浮动元素，并阻止浮动元素溢出到其他区域。- BFC可以阻止浮动元素造成的父元素塌陷：当一个元素的子元素都浮动时，如果父元素触发了BFC，它会根据子元素的高度进行布局，不会因为浮动元素而塌陷。- BFC在页面布局中的应用：通过触发元素的BFC特性，可以实现一些布局效果，如清除浮动、创建自适应的多栏布局等。</code></pre><h3 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h3><pre><code>- 根元素（&lt;html&gt;）是一个BFC。- 设置元素的 float 属性为除 none 以外的值。- 设置元素的 position 属性为 absolute 或 fixed。- 设置元素的 display 属性为 inline-block、table-cell、table-caption 或 flex。</code></pre><h2 id="元素水平垂直居中"><a href="#元素水平垂直居中" class="headerlink" title="元素水平垂直居中"></a>元素水平垂直居中</h2><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><pre><code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="定位实现"><a href="#定位实现" class="headerlink" title="定位实现"></a>定位实现</h3><ul><li>方式一:<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方式二:   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="flex布局-1"><a href="#flex布局-1" class="headerlink" title="flex布局"></a>flex布局</h3><pre><code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="隐藏元素的方式"><a href="#隐藏元素的方式" class="headerlink" title="隐藏元素的方式"></a>隐藏元素的方式</h2><ul><li>display: none;<ul><li>元素完全被隐藏掉，文档流中不占据空间，改变布局。</li><li>不可触发事件。</li></ul></li><li>visibility: hidden;<ul><li>元素隐藏掉，但仍占据空间，不改变布局。</li><li>不可触发事件</li></ul></li><li>opacity: 0;<ul><li>元素变为透明，视觉上不可见，仍占据空间。</li><li>可触发事件。</li></ul></li></ul><h2 id="css实现三角形"><a href="#css实现三角形" class="headerlink" title="css实现三角形"></a>css实现三角形</h2><ul><li>思路： 宽高设为0，边框给一定粗度，然后将三边设置为透明</li><li>使用边框：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用伪元素：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h2><ul><li>伪类选择的是满足某个条件的元素，而伪元素选择的是元素的某个部分。</li><li>伪类以单冒号（:）开头，伪元素以双冒号（::）开头。</li><li>伪类用于选择元素的状态或行为，而伪元素用于插入或生成元素的内容。</li></ul><h2 id="实现响应式设计"><a href="#实现响应式设计" class="headerlink" title="实现响应式设计"></a>实现响应式设计</h2><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><ul><li>媒体查询是 CSS 中的一种功能，它允许根据不同的媒体特性（如屏幕宽度、设备类型等）应用不同的样式。通过在 CSS 中定义不同的媒体查询规则，可以根据设备的特征为不同的屏幕尺寸提供不同的布局和样式。</li></ul><h3 id="弹性网格布局"><a href="#弹性网格布局" class="headerlink" title="弹性网格布局"></a>弹性网格布局</h3><ul><li>弹性网格布局使用相对单位（如百分比）来定义网格的列宽和行高，使得布局可以根据屏幕尺寸的变化自动调整。通过使用弹性网格布局，网页的各个元素可以根据屏幕大小灵活地改变宽度和位置。</li></ul><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><ul><li>流式布局使用相对单位和百分比来定义元素的尺寸，使得页面可以根据屏幕尺寸进行伸缩。相对于固定的像素单位，流式布局可以更好地适应不同设备的屏幕尺寸，提供更好的响应性。</li></ul><h3 id="图片响应式设计"><a href="#图片响应式设计" class="headerlink" title="图片响应式设计"></a>图片响应式设计</h3><ul><li>图片响应式设计通过使用不同的图片源（如不同大小或分辨率的图片）来适应不同的屏幕尺寸。可以使用 CSS 的 max-width 属性和 <img> 标签的 srcset 属性来实现图片的响应式展示，以确保在不同设备上加载适合的图片。</li></ul><h3 id="设备像素比"><a href="#设备像素比" class="headerlink" title="设备像素比"></a>设备像素比</h3><ul><li>设备像素比是设备物理像素与 CSS 像素之间的比率。通过使用媒体查询和 CSS 的 min-device-pixel-ratio 或 max-device-pixel-ratio 属性，可以针对不同的设备像素比提供不同的样式和布局。<h4 id="min-device-pixel-ratio-amp-amp-max-device-pixel-ratio"><a href="#min-device-pixel-ratio-amp-amp-max-device-pixel-ratio" class="headerlink" title="min-device-pixel-ratio &amp;&amp; max-device-pixel-ratio"></a>min-device-pixel-ratio &amp;&amp; max-device-pixel-ratio</h4><ul><li>是一个用于媒体查询的 CSS 属性，用于检测设备的像素密度。它用于确定设备物理像素和 CSS 像素之间的比率，并根据设备的像素密度应用不同的样式或布局<br><font color=#00FFFF>例：</font>下面的媒体查询将应用于 min-device-pixel-ratio 属性，仅在设备像素密度比率大于或等于 2 的情况下生效<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),</span><br><span class="line">      (<span class="attribute">min--moz-device-pixel-ratio</span>: <span class="number">2</span>),</span><br><span class="line">      (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">/* 根据高像素密度设备的需要应用样式或布局 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color=red>注：</font> min-device-pixel-ratio 属性的值是一个 <font color=red>浮点数</font>，可以根据具体需求进行调整和匹配。同时，由于不同浏览器和设备对于 min-device-pixel-ratio 的支持可能存在差异，建议在使用时进行适当的兼容性处理和测试。</li></ul></li></ul><h2 id="优雅降级和渐进增强"><a href="#优雅降级和渐进增强" class="headerlink" title="优雅降级和渐进增强"></a>优雅降级和渐进增强</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>优雅降级和渐进增强是两种前端开发的策略，用于确保网站或应用在不同浏览器或设备上具备基本的可用性和用户体验。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><pre><code>- 优雅降级是指首先针对具有较高性能和功能的现代浏览器开发网站或应用，然后逐步提供对较旧或不支持某些功能的浏览器的支持。- 渐进增强是指从基本的、核心功能开始，然后根据浏览器的能力逐步增强网站或应用的功能和体验。</code></pre><h2 id="动画（animation）"><a href="#动画（animation）" class="headerlink" title="动画（animation）"></a>动画（animation）</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>animation-name：定义动画的名称，对应关键帧规则中的动画名称。</li><li>animation-duration：指定动画的持续时间，单位可以是秒（s）或毫秒（ms）。</li><li>animation-timing-function：设置动画的时间函数，控制动画的速度变化。</li><li>animation-delay：指定动画开始之前的延迟时间，单位可以是秒（s）或毫秒（ms）。</li><li>animation-iteration-count：定义动画的播放次数，可以是具体的次数或 infinite（无限循环）。</li><li>animation-direction：指定动画的播放方向，可以是 normal（正向播放）、reverse（反向播放）或 alternate（来回播放）。</li><li>animation-fill-mode：设置动画在播放之前和之后的样式状态，可以是 none、forwards、backwards 或 both。</li><li>animation-play-state：控制动画的播放状态，可以是 paused（暂停）或 running（播放）。<br>  <font color=red>注：</font> 除了上述属性外，还有一些与动画相关的属性，如 <font color=red>transform、opacity、transition</font> 等，它们可以与动画属性结合使用，实现更丰富的动画效果。<br>  <font color=#00FFFF>例：</font>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> fade-in &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: fade-in;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 上述示例定义了一个名为 &quot;fade-in&quot; 的动画，通过逐渐改变元素的透明度，实现了一个淡入效果。然后将动画应用于具有 &quot;<span class="selector-class">.element</span>&quot; 类的元素，并设置动画的持续时间为 <span class="number">2</span> 秒，延迟时间为 <span class="number">1</span> 秒，时间函数为 ease-in-out，并无限循环播放。通过组合和调整这些动画属性，可以创建各种各样的 CSS 动画效果，如淡入淡出、平移、旋转、缩放等。根据具体的需求和创意，可以灵活运用这些属性来设计和实现自定义的动画效果。 --&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="如何实现溢出省略号"><a href="#如何实现溢出省略号" class="headerlink" title="如何实现溢出省略号"></a>如何实现溢出省略号</h2><h3 id="单行省略号"><a href="#单行省略号" class="headerlink" title="单行省略号"></a>单行省略号</h3>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 设置容器的宽度，根据需要进行调整 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行省略号"><a href="#多行省略号" class="headerlink" title="多行省略号"></a>多行省略号</h3><pre><code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">3</span>; <span class="comment">/* 设置显示的最大行数，根据需要进行调整 */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>only office 相关参数设置说明</title>
      <link href="/2023/05/11/only-office-01/"/>
      <url>/2023/05/11/only-office-01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initDoc</span>(<span class="params">key, url, fileType, title, model, callbackUrl</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> config = &#123;</span><br><span class="line">                    <span class="string">&quot;document&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;documentType&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;width&quot;</span>: <span class="string">&quot;100%&quot;</span>, <span class="comment">//打开窗口宽度</span></span><br><span class="line">                        <span class="string">&quot;height&quot;</span>: <span class="string">&quot;100%&quot;</span>, <span class="comment">//打开窗口高度</span></span><br><span class="line">                        <span class="string">&quot;fileType&quot;</span>: fileType, <span class="comment">//文档类型</span></span><br><span class="line">                        <span class="string">&quot;key&quot;</span>: key, <span class="comment">//定义用于服务识别文档的唯一文档标识符。每次编辑和保存文档时，都必须重新生成密钥。长度限制为128个符号。</span></span><br><span class="line">                        <span class="string">&quot;title&quot;</span>: title, <span class="comment">//为查看或编辑的文档定义所需的文件名，该文件名也将在下载文档时用作文件名。长度限制为128个符号。</span></span><br><span class="line">                        <span class="string">&quot;url&quot;</span>: url, <span class="comment">//定义存储原始查看或编辑的文档的绝对URL</span></span><br><span class="line">                        <span class="string">&quot;info&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;王重阳&quot;</span>, <span class="comment">//文件创建者名称</span></span><br><span class="line">                            <span class="string">&quot;sharingSettings&quot;</span>: [ <span class="comment">//文件对应用户的操作权限配置</span></span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;permissions&quot;</span>: <span class="string">&quot;Full Access&quot;</span>, <span class="comment">// 完全操作权限-Full Access,只读权限-Read Only 拒绝访问-Deny Access</span></span><br><span class="line">                                    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;林朝英&quot;</span> <span class="comment">//有次权限的用户</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;permissions&quot;</span>: <span class="string">&quot;Read Only&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;周伯通&quot;</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                            ],</span><br><span class="line">                            <span class="string">&quot;uploaded&quot;</span>: <span class="string">&quot;2010-07-07 3:46 PM&quot;</span> <span class="comment">//文件创建时间</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">//文档权限参数</span></span><br><span class="line">                        <span class="string">&quot;permissions&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;edit&quot;</span>: <span class="literal">true</span>, <span class="comment">//（文件是否可以编辑，false时文件不可编辑）</span></span><br><span class="line">                            <span class="string">&quot;fillForms&quot;</span>: <span class="literal">true</span>, <span class="comment">//定义是否能在文档中填充表单</span></span><br><span class="line">                            <span class="string">&quot;print&quot;</span>: <span class="literal">true</span>, <span class="comment">//定义文档是否能打印</span></span><br><span class="line">                            <span class="string">&quot;review&quot;</span>: <span class="literal">false</span>, <span class="comment">//第一是否显示审阅文档菜单</span></span><br><span class="line">                            <span class="string">&quot;comment&quot;</span>: <span class="literal">true</span>, <span class="comment">//定义是否可以注释文档。如果注释权限设置为“ true”，则文档侧栏将包含“注释”菜单选项；只有将mode参数设置为edit时才生效，默认值与edit参数的值一致。</span></span><br><span class="line">                            <span class="string">&quot;copy&quot;</span>: <span class="literal">true</span>, <span class="comment">//是否允许您将内容复制到剪贴板。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;download&quot;</span>: <span class="literal">true</span>, <span class="comment">//定义是否可以下载文档或仅在线查看或编辑文档。如果下载权限设置为“false”下载为菜单选项将没有。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;modifyContentControl&quot;</span>: <span class="literal">true</span>, <span class="comment">//定义是否可以更改内容控件设置。仅当mode参数设置为edit时，内容控件修改才可用于文档编辑器。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;modifyFilter&quot;</span>: <span class="literal">true</span>, <span class="comment">//定义过滤器是否可以全局应用（true）影响所有其他用户，或局部应用（false），即仅适用于当前用户。如果将mode参数设置为edit，则过滤器修改仅对电子表格编辑器可用。默认值为true。</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// type: &quot;embedded&quot;,</span></span><br><span class="line">                    <span class="comment">//打开文档类型</span></span><br><span class="line">                    <span class="comment">// text对应各种文档类型(.doc, .docm, .docx, .dot, .dotm, .dotx, .epub, .fodt, .htm, .html, .mht, .odt, .ott, .pdf, .rtf, .txt, .djvu, .xps)</span></span><br><span class="line">                    <span class="comment">//spreadsheet对应表格类型(.csv, .fods, .ods, .ots, .xls, .xlsm, .xlsx, .xlt, .xltm, .xltx)</span></span><br><span class="line">                    <span class="comment">//presentation对应PPT类型(.fodp, .odp, .otp, .pot, .potm, .potx, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx)</span></span><br><span class="line">                    <span class="string">&quot;editorConfig&quot;</span>: &#123; <span class="comment">//编辑配置</span></span><br><span class="line">                        <span class="string">&quot;createUrl&quot;</span>: <span class="string">&quot;http://docServer:port/url-to-create-document/&quot;</span>, <span class="comment">//指定创建文件的页面,添加该配置后文档服务器插件才会显示新建文件按钮</span></span><br><span class="line">                        <span class="string">&quot;mode&quot;</span>: model, <span class="comment">//文档操作模式 view 视图模式不可编辑  edit 编辑模式可编辑文档</span></span><br><span class="line">                        <span class="string">&quot;callbackUrl&quot;</span>: callbackUrl, <span class="comment">//保存文件时的回调地址</span></span><br><span class="line">                        <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;zh-CN&quot;</span>, <span class="comment">//语言环境</span></span><br><span class="line">                        <span class="string">&quot;customization&quot;</span>: &#123; <span class="comment">//定制部分允许自定义编辑器界面，使其看起来像您的其他产品，并更改是否存在其他按钮，链接，更改徽标和编辑者所有者详细信息。</span></span><br><span class="line">                            <span class="string">&quot;help&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义是显示还是隐藏“帮助”菜单按钮。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;hideRightMenu&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义在第一次加载时是显示还是隐藏右侧菜单。默认值为false。</span></span><br><span class="line">                            <span class="string">&quot;autosave&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义是启用还是禁用“自动保存”菜单选项。请注意，如果您在菜单中更改此选项，它将被保存到浏览器的localStorage中。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;forcesave&quot;</span>: <span class="literal">true</span>, <span class="comment">//定义保存按钮是否显示默认false</span></span><br><span class="line">                            <span class="string">&quot;chat&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义“聊天”菜单按钮是显示还是隐藏；请注意，如果您隐藏“聊天”按钮，则相应的聊天功能也将被禁用。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;commentAuthorOnly&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义用户是否只能编辑和删除他的评论。默认值为false。</span></span><br><span class="line">                            <span class="string">&quot;comments&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义是显示还是隐藏“注释”菜单按钮；请注意，如果您隐藏“评论”按钮，则相应的评论功能将仅可用于查看，评论的添加和编辑将不可用。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;compactHeader&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义是否将菜单栏放在在徽标旁边使界面更加紧凑默认false。</span></span><br><span class="line">                            <span class="string">&quot;compactToolbar&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义显示的顶部工具栏类型是完整（false）还是紧凑true。默认值为false 多余菜单将在右侧折叠点击显示。</span></span><br><span class="line">                            <span class="string">&quot;compatibleFeatures&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义仅与OOXML格式兼容的功能的使用。例如，不要在整个文档上使用注释。默认值为false。</span></span><br><span class="line">                            <span class="string">&quot;macros&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义是否将运行文档宏以及可用的宏设置。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;macrosMode&quot;</span>: <span class="string">&quot;warn&quot;</span>, <span class="comment">//定义是否将运行文档宏。可以采用以下值： disable -根本不运行；enable -自动运行所有宏；warn -警告宏并请求允许运行。默认值为original。</span></span><br><span class="line">                            <span class="string">&quot;plugins&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义是否将启动插件并可用。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;showReviewChanges&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义在加载编辑器时是否自动显示或隐藏审阅更改面板。默认值为false。</span></span><br><span class="line">                            <span class="string">&quot;spellcheck&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义在加载编辑器时是否自动打开或关闭拼写检查器。拼写检查器仅适用于文档编辑器和演示文稿编辑器。默认值为true。</span></span><br><span class="line">                            <span class="string">&quot;toolbarNoTabs&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义是突出显示顶部工具栏选项卡样式。默认值为false。</span></span><br><span class="line">                            <span class="string">&quot;unit&quot;</span>: <span class="string">&quot;cm&quot;</span>, <span class="comment">//定义在标尺和对话框中使用的度量单位。可以采用以下值：cm -厘米，pt-点，inch -英寸。默认值为厘米（cm）。</span></span><br><span class="line">                            <span class="string">&quot;zoom&quot;</span>: <span class="number">100</span>, <span class="comment">//定义以百分比为单位的文档显示缩放值。可以取大于0的值。对于文本文档和演示文稿，可以将此参数设置为-1（使文档适合页面选项）或-2（使文档页面宽度适合编辑器页面）。默认值为100。</span></span><br><span class="line">                            <span class="string">&quot;customer&quot;</span>: &#123; <span class="comment">//关于 文档编辑器的显示信息</span></span><br><span class="line">                                <span class="string">&quot;address&quot;</span>: <span class="string">&quot;My City, 123a-45&quot;</span>, <span class="comment">//有权访问编辑或编辑作者的公司或个人的邮政地址，</span></span><br><span class="line">                                <span class="string">&quot;info&quot;</span>: <span class="string">&quot;Some additional information&quot;</span>, <span class="comment">//有关您希望其他人认识的公司或个人的一些其他信息，</span></span><br><span class="line">                                <span class="string">&quot;logo&quot;</span>: <span class="string">&quot;https://example.com/logo-big.png&quot;</span>, <span class="comment">//图片徽标的路径（此文件没有特别建议，但是如果使用透明背景的.png格式会更好）。图片必须具有以下尺寸：432x70，</span></span><br><span class="line">                                <span class="string">&quot;mail&quot;</span>: <span class="string">&quot;john@example.com&quot;</span>, <span class="comment">//有权访问编辑者或编辑者的公司或个人的电子邮件地址</span></span><br><span class="line">                                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;欧阳锋&quot;</span>, <span class="comment">//该公司或个人的谁可以访问编辑或编辑作者，名称</span></span><br><span class="line">                                <span class="string">&quot;www&quot;</span>: <span class="string">&quot;example.com&quot;</span> <span class="comment">//以上公司或个人的家庭网站地址，</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="string">&quot;feedback&quot;</span>: &#123; <span class="comment">//反馈配置信息</span></span><br><span class="line">                                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="comment">//单击“反馈和支持”菜单按钮时将打开的网站地址的绝对URL ，</span></span><br><span class="line">                                <span class="string">&quot;visible&quot;</span>: <span class="literal">false</span> <span class="comment">//显示或隐藏“反馈和支持”菜单按钮，</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="string">&quot;goback&quot;</span>: &#123; <span class="comment">//定义“打开文件位置”菜单按钮和右上角按钮的设置。该对象具有以下参数：</span></span><br><span class="line">                                <span class="string">&quot;blank&quot;</span>: <span class="literal">true</span>, <span class="comment">//在新的浏览器选项卡/窗口（如果值设置为true）或当前选项卡（如果值设置为false）中打开网站。默认值为true，</span></span><br><span class="line">                                <span class="string">&quot;requestClose&quot;</span>: <span class="literal">false</span>, <span class="comment">//定义如果单击“打开文件位置”按钮，则调用events.onRequestClose事件，而不是打开浏览器选项卡或窗口。默认值为false，</span></span><br><span class="line">                                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Open file location&quot;</span>, <span class="comment">//将在“打开文件位置”菜单按钮和右上角按钮（即，而不是“转到文档”）上显示的文本，</span></span><br><span class="line">                                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://example.com&quot;</span> <span class="comment">//单击“打开文件位置”菜单按钮时将打开的网站地址的绝对URL ，</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="string">&quot;logo&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;image&quot;</span>: <span class="string">&quot;https://example.com/logo.png&quot;</span>, <span class="comment">//图像文件的路径，用于在普通工作模式下显示（即，在所有编辑器的查看和编辑模式下）。图片必须具有以下尺寸：172x40，</span></span><br><span class="line">                                <span class="string">&quot;imageEmbedded&quot;</span>: <span class="string">&quot;https://example.com/logo_em.png&quot;</span>, <span class="comment">//用于以嵌入式模式显示的图像文件的路径（请参阅config部分以了解如何定义嵌入式文档类型）。图片必须具有以下尺寸：248x40，</span></span><br><span class="line">                                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com&quot;</span> <span class="comment">//某人单击徽标图像时将使用的绝对URL（可用于转到您的网站等）。保留为空字符串或null以使徽标不可单击，</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;user&quot;</span>: &#123; <span class="comment">//用户信息</span></span><br><span class="line">                            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="comment">//用户ID</span></span><br><span class="line">                            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;操作员&quot;</span> <span class="comment">//用户全名称</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;embedded&quot;</span>: &#123; <span class="comment">//Embedded部分仅适用于嵌入式文档类型（请参阅config部分以了解如何定义嵌入式文档类型）。它允许更改设置，这些设置定义嵌入式模式下按钮的行为。</span></span><br><span class="line">                            <span class="string">&quot;embedUrl&quot;</span>: <span class="string">&quot;https://example.com/embedded?doc=exampledocument1.docx&quot;</span>, <span class="comment">//定义文档的绝对URL，以作为嵌入到网页中的文档的源文件</span></span><br><span class="line">                            <span class="string">&quot;fullscreenUrl&quot;</span>: <span class="string">&quot;https://example.com/embedded?doc=exampledocument1.docx#fullscreen&quot;</span>, <span class="comment">//定义将以全屏模式打开的文档的绝对URL。</span></span><br><span class="line">                            <span class="string">&quot;saveUrl&quot;</span>: <span class="string">&quot;https://example.com/download?doc=exampledocument1.docx&quot;</span>, <span class="comment">//定义允许将文档保存到用户个人计算机上的绝对URL。</span></span><br><span class="line">                            <span class="string">&quot;shareUrl&quot;</span>: <span class="string">&quot;https://example.com/view?doc=exampledocument1.docx&quot;</span>, <span class="comment">//定义允许其他用户共享此文档的绝对URL。</span></span><br><span class="line">                            <span class="string">&quot;toolbarDocked&quot;</span>: <span class="string">&quot;top&quot;</span> <span class="comment">//定义嵌入式查看器工具栏的位置，可以为top或bottom。</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                    <span class="string">&quot;events&quot;</span>: &#123; <span class="comment">//事件配置</span></span><br><span class="line">                        <span class="comment">// onAppReady,//-将应用程序加载到浏览器时调用的函数。</span></span><br><span class="line">                        <span class="comment">// onCollaborativeChanges //-当文档由其他用户在严格共同编辑模式下共同编辑时调用的函数。</span></span><br><span class="line">                        <span class="comment">// onDocumentReady,//-将应用程序加载到浏览器时调用的函数。</span></span><br><span class="line">                        <span class="comment">// onDocumentStateChange,//-修改文档时调用的函数。这就是所谓的使用参数：&#123;真正的“数据”&#125;在当前用户编辑文档以及与参数：&#123;“数据”：假&#125;在当前用户的更改发送到文档编辑服务。</span></span><br><span class="line">                        <span class="comment">// onDownloadAs,//-调用downloadAs方法时，使用指向已编辑文件的绝对URL调用的函数。在data参数中发送要下载的文档的绝对URL 。</span></span><br><span class="line">                        <span class="comment">// onError,//-发生错误或其他特定事件时调用的函数。错误消息在data参数中发送。</span></span><br><span class="line">                        <span class="comment">// onInfo,//-应用程序打开文件时调用的函数。该模式在data.mode参数中发送。可以查看或编辑。</span></span><br><span class="line">                        <span class="comment">// onMetaChange,//-通过meta命令更改文档的元信息时调用的函数。文档名称通过data.title参数发送。</span></span><br><span class="line">                        <span class="comment">// onOutdatedVersion,//-使用旧的document.key值打开文档进行编辑时，显示错误后调用的函数，该值用于编辑先前的文档版本并已成功保存。调用此事件时，必须使用新的document.key重新初始化编辑器。</span></span><br><span class="line">                        <span class="comment">// onReady,//-将应用程序加载到浏览器时调用的函数。自从5.0版本不推荐使用，请使用onAppReady代替</span></span><br><span class="line">                        <span class="comment">// onRequestClose,//-结束编辑器的工作并且必须关闭编辑器时调用的函数。</span></span><br><span class="line">                        <span class="comment">// onRequestCompareFile,//-用户尝试通过单击“存储中的文档”按钮来选择要比较的文档时调用的函数。要选择要比较的文档，必须调用setRevisedFile方法。如果未声明该方法，则不会显示“来自存储的文档”按钮。</span></span><br><span class="line">                        <span class="comment">// onRequestCreateNew,//-用户尝试通过单击“新建”按钮来创建文档时调用的函数。使用此方法代替createUrl字段。如果未声明该方法且未指定createUrl，则将不会显示“创建新”按钮。</span></span><br><span class="line">                        <span class="comment">// onRequestEditRights,//-用户尝试通过单击“编辑文档”按钮尝试将文档从视图切换到编辑模式时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“编辑”按钮。</span></span><br><span class="line">                        <span class="comment">// onRequestHistory,//-用户尝试通过单击“版本历史记录”按钮显示文档版本历史记录时调用的函数。要显示文档版本历史，您必须调用refreshHistory方法。如果未声明该方法和onRequestHistoryData方法，则不会显示“版本历史记录”按钮。</span></span><br><span class="line">                        <span class="comment">// onRequestHistoryClose,//-当用户尝试通过单击“关闭历史记录”按钮来查看文档版本历史记录时，试图调用该文档时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“关闭历史记录”按钮。</span></span><br><span class="line">                        <span class="comment">// onRequestHistoryData,//-用户尝试单击文档版本历史记录中的特定文档版本时调用的函数。</span></span><br><span class="line">                        <span class="comment">// onRequestInsertImage,//-用户尝试通过单击“保存图像”按钮插入图像时调用的函数。图像插入的类型在参数data.c中指定。</span></span><br><span class="line">                        <span class="comment">// onRequestRename,//-用户尝试通过单击“重命名...”按钮重命名文件时调用的函数。</span></span><br><span class="line">                        <span class="comment">// onRequestRestore,//-用户单击版本历史记录中的“还原”按钮来还原文件版本时调用的函数。</span></span><br><span class="line">                        <span class="comment">// onRequestSaveAs,//-用户尝试通过单击“另存为...”按钮保存文件时调用的函数。文档的标题和要下载的文档的绝对URL在data参数中发送。如果未声明该方法，则不会显示“另存为...”按钮。</span></span><br><span class="line">                        <span class="comment">// onRequestSharingSettings,//-用户单击“更改访问权限”按钮来管理文档访问权限时调用的函数。必须调用setSharingSettings方法来更新有关允许与其他用户共享文档的设置的信息。如果未声明该方法，则不会显示“更改访问权限”按钮。</span></span><br><span class="line">                        <span class="comment">// onRequestUsers,//-评论者可以选择要在评论中提及的其他用户时调用的函数。要设置用户列表，必须调用setUsers方法。</span></span><br><span class="line">                        <span class="comment">// onWarning,//-发生警告时调用的函数。警告消息在data参数中发送。</span></span><br><span class="line">                        <span class="comment">// &quot;onDocumentStateChange&quot;: function() &#123;</span></span><br><span class="line">                        <span class="comment">// &#125;, //文档改变后的回调</span></span><br><span class="line">                        <span class="comment">//&quot;onDocumentReady&quot; : onDocumentReady, //文档初始化准备好后的回调</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> docEditor = <span class="keyword">new</span> <span class="title class_">DocsAPI</span>.<span class="title class_">DocEditor</span>(<span class="string">&quot;placeholder&quot;</span>, config);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>转载至：<a href="https://blog.csdn.net/cyulotus/article/details/128404264">https://blog.csdn.net/cyulotus/article/details/128404264</a></p>]]></content>
      
      
      <categories>
          
          <category> 插件使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/06/hello-world/"/>
      <url>/2023/05/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hello Word </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
